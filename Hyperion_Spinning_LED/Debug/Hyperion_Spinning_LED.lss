
Hyperion_Spinning_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000928  000009bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080012e  0080012e  000009ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f68  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001543  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010b2b  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004af  00000000  00000000  000145a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00014a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000a5f  00000000  00000000  00014ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
   2:	00 00       	nop
   4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
   6:	00 00       	nop
   8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
   a:	00 00       	nop
   c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
   e:	00 00       	nop
  10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
  12:	00 00       	nop
  14:	9e c0       	rjmp	.+316    	; 0x152 <__bad_interrupt>
  16:	00 00       	nop
  18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
  1e:	00 00       	nop
  20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
  22:	00 00       	nop
  24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
  26:	00 00       	nop
  28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
  2e:	00 00       	nop
  30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
  32:	00 00       	nop
  34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
  36:	00 00       	nop
  38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
  3e:	00 00       	nop
  40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
  42:	00 00       	nop
  44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
  46:	00 00       	nop
  48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
  4e:	00 00       	nop
  50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
  52:	00 00       	nop
  54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
  56:	00 00       	nop
  58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
  5e:	00 00       	nop
  60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
  62:	00 00       	nop
  64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
  66:	00 00       	nop
  68:	c7 02       	muls	r28, r23
  6a:	90 03       	fmuls	r17, r16
  6c:	90 03       	fmuls	r17, r16
  6e:	90 03       	fmuls	r17, r16
  70:	90 03       	fmuls	r17, r16
  72:	90 03       	fmuls	r17, r16
  74:	90 03       	fmuls	r17, r16
  76:	90 03       	fmuls	r17, r16
  78:	90 03       	fmuls	r17, r16
  7a:	90 03       	fmuls	r17, r16
  7c:	90 03       	fmuls	r17, r16
  7e:	90 03       	fmuls	r17, r16
  80:	90 03       	fmuls	r17, r16
  82:	ab 02       	muls	r26, r27
  84:	90 03       	fmuls	r17, r16
  86:	ce 02       	muls	r28, r30
  88:	df 02       	muls	r29, r31
  8a:	f4 02       	muls	r31, r20
  8c:	09 03       	fmul	r16, r17
  8e:	1c 03       	fmul	r17, r20
  90:	2f 03       	fmul	r18, r23
  92:	42 03       	mulsu	r20, r18
  94:	55 03       	mulsu	r21, r21
  96:	6c 03       	fmul	r22, r20
  98:	7d 03       	fmul	r23, r21
  9a:	90 03       	fmuls	r17, r16
  9c:	90 03       	fmuls	r17, r16
  9e:	90 03       	fmuls	r17, r16
  a0:	90 03       	fmuls	r17, r16
  a2:	90 03       	fmuls	r17, r16
  a4:	b2 02       	muls	r27, r18
  a6:	90 03       	fmuls	r17, r16
  a8:	d4 00       	.word	0x00d4	; ????
  aa:	e7 00       	.word	0x00e7	; ????
  ac:	fa 00       	.word	0x00fa	; ????
  ae:	0d 01       	movw	r0, r26
  b0:	20 01       	movw	r4, r0
  b2:	31 01       	movw	r6, r2
  b4:	42 01       	movw	r8, r4
  b6:	57 01       	movw	r10, r14
  b8:	68 01       	movw	r12, r16
  ba:	79 01       	movw	r14, r18
  bc:	8c 01       	movw	r16, r24
  be:	8c 01       	movw	r16, r24
  c0:	9d 01       	movw	r18, r26
  c2:	b0 01       	movw	r22, r0
  c4:	c5 01       	movw	r24, r10
  c6:	d6 01       	movw	r26, r12
  c8:	e9 01       	movw	r28, r18
  ca:	00 02       	muls	r16, r16
  cc:	13 02       	muls	r17, r19
  ce:	26 02       	muls	r18, r22
  d0:	37 02       	muls	r19, r23
  d2:	48 02       	muls	r20, r24
  d4:	5b 02       	muls	r21, r27
  d6:	6e 02       	muls	r22, r30
  d8:	81 02       	muls	r24, r17
  da:	94 02       	muls	r25, r20
  dc:	90 03       	fmuls	r17, r16
  de:	90 03       	fmuls	r17, r16
  e0:	90 03       	fmuls	r17, r16
  e2:	90 03       	fmuls	r17, r16
  e4:	90 03       	fmuls	r17, r16
  e6:	90 03       	fmuls	r17, r16
  e8:	d4 00       	.word	0x00d4	; ????
  ea:	e7 00       	.word	0x00e7	; ????
  ec:	fa 00       	.word	0x00fa	; ????
  ee:	0d 01       	movw	r0, r26
  f0:	20 01       	movw	r4, r0
  f2:	31 01       	movw	r6, r2
  f4:	42 01       	movw	r8, r4
  f6:	57 01       	movw	r10, r14
  f8:	68 01       	movw	r12, r16
  fa:	79 01       	movw	r14, r18
  fc:	8c 01       	movw	r16, r24
  fe:	8c 01       	movw	r16, r24
 100:	9d 01       	movw	r18, r26
 102:	b0 01       	movw	r22, r0
 104:	c5 01       	movw	r24, r10
 106:	d6 01       	movw	r26, r12
 108:	e9 01       	movw	r28, r18
 10a:	00 02       	muls	r16, r16
 10c:	13 02       	muls	r17, r19
 10e:	26 02       	muls	r18, r22
 110:	37 02       	muls	r19, r23
 112:	48 02       	muls	r20, r24
 114:	5b 02       	muls	r21, r27
 116:	6e 02       	muls	r22, r30
 118:	81 02       	muls	r24, r17
 11a:	94 02       	muls	r25, r20

0000011c <__ctors_end>:
 11c:	11 24       	eor	r1, r1
 11e:	1f be       	out	0x3f, r1	; 63
 120:	cf ef       	ldi	r28, 0xFF	; 255
 122:	d8 e0       	ldi	r29, 0x08	; 8
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	e8 e2       	ldi	r30, 0x28	; 40
 130:	f9 e0       	ldi	r31, 0x09	; 9
 132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
 134:	05 90       	lpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	ae 32       	cpi	r26, 0x2E	; 46
 13a:	b1 07       	cpc	r27, r17
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	ae e2       	ldi	r26, 0x2E	; 46
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
 146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
 148:	af 32       	cpi	r26, 0x2F	; 47
 14a:	b2 07       	cpc	r27, r18
 14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
 14e:	77 d3       	rcall	.+1774   	; 0x83e <main>
 150:	e9 c3       	rjmp	.+2002   	; 0x924 <_exit>

00000152 <__bad_interrupt>:
 152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <board_init>:
 154:	95 b1       	in	r25, 0x05	; 5
 156:	84 b1       	in	r24, 0x04	; 4
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	8f 77       	andi	r24, 0x7F	; 127
 15c:	84 b9       	out	0x04, r24	; 4
 15e:	89 2f       	mov	r24, r25
 160:	80 6a       	ori	r24, 0xA0	; 160
 162:	85 b9       	out	0x05, r24	; 5
 164:	08 95       	ret

00000166 <displayCharacter>:
}

// Displays the character with the LED
// For each "frame", change the LEDs to the new pattern
// Each frame is given in hex
void displayCharacter (char character) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	2a 97       	sbiw	r28, 0x0a	; 10
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	e8 2f       	mov	r30, r24
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
	unsigned int currentFrameValue = 0;
	unsigned int frames[5] = {0x00,0x00,0x00,0x00,0x00};
 17c:	9e 01       	movw	r18, r28
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	d9 01       	movw	r26, r18
 186:	1d 92       	st	X+, r1
 188:	8a 95       	dec	r24
 18a:	e9 f7       	brne	.-6      	; 0x186 <displayCharacter+0x20>

	switch (character)
 18c:	8e 2f       	mov	r24, r30
 18e:	ee 0f       	add	r30, r30
 190:	99 0b       	sbc	r25, r25
 192:	aa 0b       	sbc	r26, r26
 194:	bb 0b       	sbc	r27, r27
 196:	fc 01       	movw	r30, r24
 198:	b1 97       	sbiw	r30, 0x21	; 33
 19a:	ea 35       	cpi	r30, 0x5A	; 90
 19c:	f1 05       	cpc	r31, r1
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <displayCharacter+0x3c>
 1a0:	bf c2       	rjmp	.+1406   	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 1a2:	ec 5c       	subi	r30, 0xCC	; 204
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	9a c3       	rjmp	.+1844   	; 0x8dc <__tablejump2__>
	{
		case 'A': case 'a':
			//1F 24 44 24 1F
			frames[0] = 0x1F;
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x24;
 1b0:	24 e2       	ldi	r18, 0x24	; 36
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	3c 83       	std	Y+4, r19	; 0x04
 1b6:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x44;
 1b8:	44 e4       	ldi	r20, 0x44	; 68
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	5e 83       	std	Y+6, r21	; 0x06
 1be:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x24;
 1c0:	38 87       	std	Y+8, r19	; 0x08
 1c2:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x1F;
 1c4:	9a 87       	std	Y+10, r25	; 0x0a
 1c6:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1c8:	45 e0       	ldi	r20, 0x05	; 5
 1ca:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x1F;
			frames[1] = 0x24;
			frames[2] = 0x44;
			frames[3] = 0x24;
			frames[4] = 0x1F;
			break;
 1cc:	ab c2       	rjmp	.+1366   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'B': case 'b':
			//7F 49 49 49 36
			frames[0] = 0x7F;
 1ce:	8f e7       	ldi	r24, 0x7F	; 127
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 1d6:	89 e4       	ldi	r24, 0x49	; 73
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9c 83       	std	Y+4, r25	; 0x04
 1dc:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 1de:	9e 83       	std	Y+6, r25	; 0x06
 1e0:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 1e2:	98 87       	std	Y+8, r25	; 0x08
 1e4:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 1e6:	86 e3       	ldi	r24, 0x36	; 54
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	9a 87       	std	Y+10, r25	; 0x0a
 1ec:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1ee:	45 e0       	ldi	r20, 0x05	; 5
 1f0:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 1f2:	98 c2       	rjmp	.+1328   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'C': case 'c':
			//3E 41 41 41 22
			frames[0] = 0x3E;
 1f4:	8e e3       	ldi	r24, 0x3E	; 62
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9c 83       	std	Y+4, r25	; 0x04
 202:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 204:	9e 83       	std	Y+6, r25	; 0x06
 206:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 208:	98 87       	std	Y+8, r25	; 0x08
 20a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x22;
 20c:	82 e2       	ldi	r24, 0x22	; 34
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9a 87       	std	Y+10, r25	; 0x0a
 212:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 214:	45 e0       	ldi	r20, 0x05	; 5
 216:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x22;
			break;
 218:	85 c2       	rjmp	.+1290   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'D': case 'd':
			//7F 41 41 41 3E
			frames[0] = 0x7F;
 21a:	8f e7       	ldi	r24, 0x7F	; 127
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9a 83       	std	Y+2, r25	; 0x02
 220:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 22a:	9e 83       	std	Y+6, r25	; 0x06
 22c:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 22e:	98 87       	std	Y+8, r25	; 0x08
 230:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 232:	8e e3       	ldi	r24, 0x3E	; 62
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	9a 87       	std	Y+10, r25	; 0x0a
 238:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 23a:	45 e0       	ldi	r20, 0x05	; 5
 23c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 23e:	72 c2       	rjmp	.+1252   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'E': case 'e':
			//7F 49 49 49 49
			frames[0] = 0x7F;
 240:	8f e7       	ldi	r24, 0x7F	; 127
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	9a 83       	std	Y+2, r25	; 0x02
 246:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 248:	89 e4       	ldi	r24, 0x49	; 73
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9c 83       	std	Y+4, r25	; 0x04
 24e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 254:	98 87       	std	Y+8, r25	; 0x08
 256:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x49;
 258:	9a 87       	std	Y+10, r25	; 0x0a
 25a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 25c:	45 e0       	ldi	r20, 0x05	; 5
 25e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x49;
			break;
 260:	61 c2       	rjmp	.+1218   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'F': case 'f':
			//7F 48 48 48 48
			frames[0] = 0x7F;
 262:	8f e7       	ldi	r24, 0x7F	; 127
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 26a:	88 e4       	ldi	r24, 0x48	; 72
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 83       	std	Y+4, r25	; 0x04
 270:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 272:	9e 83       	std	Y+6, r25	; 0x06
 274:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 276:	98 87       	std	Y+8, r25	; 0x08
 278:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x48;
 27a:	9a 87       	std	Y+10, r25	; 0x0a
 27c:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 27e:	45 e0       	ldi	r20, 0x05	; 5
 280:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x48;
			break;
 282:	50 c2       	rjmp	.+1184   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'G': case 'g':
			//3E 41 49 49 2E
			frames[0] = 0x3E;
 284:	8e e3       	ldi	r24, 0x3E	; 62
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	9c 83       	std	Y+4, r25	; 0x04
 292:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 294:	89 e4       	ldi	r24, 0x49	; 73
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9e 83       	std	Y+6, r25	; 0x06
 29a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 29c:	98 87       	std	Y+8, r25	; 0x08
 29e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x2E;
 2a0:	8e e2       	ldi	r24, 0x2E	; 46
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9a 87       	std	Y+10, r25	; 0x0a
 2a6:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2a8:	45 e0       	ldi	r20, 0x05	; 5
 2aa:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x2E;
			break;
 2ac:	3b c2       	rjmp	.+1142   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'H': case 'h':
			//7F 08 08 08 7F
			frames[0] = 0x7F;
 2ae:	2f e7       	ldi	r18, 0x7F	; 127
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	3a 83       	std	Y+2, r19	; 0x02
 2b4:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x08;
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	9c 83       	std	Y+4, r25	; 0x04
 2bc:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 2be:	9e 83       	std	Y+6, r25	; 0x06
 2c0:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 2c2:	98 87       	std	Y+8, r25	; 0x08
 2c4:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 2c6:	3a 87       	std	Y+10, r19	; 0x0a
 2c8:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2ca:	45 e0       	ldi	r20, 0x05	; 5
 2cc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 2ce:	2a c2       	rjmp	.+1108   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'I': case 'i':
			//41 41 7F 41 41
			frames[0] = 0x41;
 2d0:	81 e4       	ldi	r24, 0x41	; 65
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 2d8:	9c 83       	std	Y+4, r25	; 0x04
 2da:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 2dc:	2f e7       	ldi	r18, 0x7F	; 127
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	3e 83       	std	Y+6, r19	; 0x06
 2e2:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x41;
 2e4:	98 87       	std	Y+8, r25	; 0x08
 2e6:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x41;
 2e8:	9a 87       	std	Y+10, r25	; 0x0a
 2ea:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2ec:	45 e0       	ldi	r20, 0x05	; 5
 2ee:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x41;
			frames[2] = 0x7F;
			frames[3] = 0x41;
			frames[4] = 0x41;
			break;
 2f0:	19 c2       	rjmp	.+1074   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'J': case 'j':
			//02 01 01 01 7E
			frames[0] = 0x02;
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	9c 83       	std	Y+4, r25	; 0x04
 300:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 302:	9e 83       	std	Y+6, r25	; 0x06
 304:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 306:	98 87       	std	Y+8, r25	; 0x08
 308:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 30a:	8e e7       	ldi	r24, 0x7E	; 126
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9a 87       	std	Y+10, r25	; 0x0a
 310:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 312:	45 e0       	ldi	r20, 0x05	; 5
 314:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x02;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 316:	06 c2       	rjmp	.+1036   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
			frames[2] = 0x14;
			frames[3] = 0x22;
			frames[4] = 0x41;
		case 'L': case 'l':
			//7F 01 01 01 01
			frames[0] = 0x7F;
 318:	8f e7       	ldi	r24, 0x7F	; 127
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 83       	std	Y+4, r25	; 0x04
 326:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 328:	9e 83       	std	Y+6, r25	; 0x06
 32a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 32c:	98 87       	std	Y+8, r25	; 0x08
 32e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 330:	9a 87       	std	Y+10, r25	; 0x0a
 332:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 334:	45 e0       	ldi	r20, 0x05	; 5
 336:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 338:	f5 c1       	rjmp	.+1002   	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'M': case 'm':
			//7F 20 18 20 7F
			frames[0] = 0x7F;
 33a:	8f e7       	ldi	r24, 0x7F	; 127
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x20;
 342:	20 e2       	ldi	r18, 0x20	; 32
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	3c 83       	std	Y+4, r19	; 0x04
 348:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x18;
 34a:	48 e1       	ldi	r20, 0x18	; 24
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	5e 83       	std	Y+6, r21	; 0x06
 350:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x20;
 352:	38 87       	std	Y+8, r19	; 0x08
 354:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 356:	9a 87       	std	Y+10, r25	; 0x0a
 358:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 35a:	45 e0       	ldi	r20, 0x05	; 5
 35c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x20;
			frames[2] = 0x18;
			frames[3] = 0x20;
			frames[4] = 0x7F;
			break;
 35e:	e2 c1       	rjmp	.+964    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'N': case 'n':
			//7F 10 08 04 7F
			frames[0] = 0x7F;
 360:	8f e7       	ldi	r24, 0x7F	; 127
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x10;
 368:	20 e1       	ldi	r18, 0x10	; 16
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	3c 83       	std	Y+4, r19	; 0x04
 36e:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 370:	28 e0       	ldi	r18, 0x08	; 8
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	3e 83       	std	Y+6, r19	; 0x06
 376:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x04;
 378:	24 e0       	ldi	r18, 0x04	; 4
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	38 87       	std	Y+8, r19	; 0x08
 37e:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 380:	9a 87       	std	Y+10, r25	; 0x0a
 382:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 384:	45 e0       	ldi	r20, 0x05	; 5
 386:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x10;
			frames[2] = 0x08;
			frames[3] = 0x04;
			frames[4] = 0x7F;
			break;
 388:	cd c1       	rjmp	.+922    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'O': case 'o':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 38a:	2e e3       	ldi	r18, 0x3E	; 62
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	3a 83       	std	Y+2, r19	; 0x02
 390:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	9c 83       	std	Y+4, r25	; 0x04
 398:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 39a:	9e 83       	std	Y+6, r25	; 0x06
 39c:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 39e:	98 87       	std	Y+8, r25	; 0x08
 3a0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 3a2:	3a 87       	std	Y+10, r19	; 0x0a
 3a4:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3a6:	45 e0       	ldi	r20, 0x05	; 5
 3a8:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 3aa:	bc c1       	rjmp	.+888    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'P': case 'p':
			//7F 48 48 48 30
			frames[0] = 0x7F;
 3ac:	8f e7       	ldi	r24, 0x7F	; 127
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 3b4:	88 e4       	ldi	r24, 0x48	; 72
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	9c 83       	std	Y+4, r25	; 0x04
 3ba:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 3bc:	9e 83       	std	Y+6, r25	; 0x06
 3be:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 3c0:	98 87       	std	Y+8, r25	; 0x08
 3c2:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x30;
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	9a 87       	std	Y+10, r25	; 0x0a
 3ca:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3cc:	45 e0       	ldi	r20, 0x05	; 5
 3ce:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 3d0:	a9 c1       	rjmp	.+850    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'Q': case 'q':
			//3E 41 45 43 3F
			frames[0] = 0x3E;
 3d2:	8e e3       	ldi	r24, 0x3E	; 62
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	9a 83       	std	Y+2, r25	; 0x02
 3d8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	9c 83       	std	Y+4, r25	; 0x04
 3e0:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x45;
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	9e 83       	std	Y+6, r25	; 0x06
 3e8:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x43;
 3ea:	83 e4       	ldi	r24, 0x43	; 67
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	98 87       	std	Y+8, r25	; 0x08
 3f0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9a 87       	std	Y+10, r25	; 0x0a
 3f8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3fa:	45 e0       	ldi	r20, 0x05	; 5
 3fc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x45;
			frames[3] = 0x43;
			frames[4] = 0x3F;
			break;
 3fe:	92 c1       	rjmp	.+804    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'R': case 'r':
			//7F 48 48 48 37
			frames[0] = 0x7F;
 400:	8f e7       	ldi	r24, 0x7F	; 127
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 408:	88 e4       	ldi	r24, 0x48	; 72
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	9c 83       	std	Y+4, r25	; 0x04
 40e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 410:	9e 83       	std	Y+6, r25	; 0x06
 412:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 414:	98 87       	std	Y+8, r25	; 0x08
 416:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x37;
 418:	87 e3       	ldi	r24, 0x37	; 55
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	9a 87       	std	Y+10, r25	; 0x0a
 41e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 420:	45 e0       	ldi	r20, 0x05	; 5
 422:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x37;
			break;
 424:	7f c1       	rjmp	.+766    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'S': case 's':
			//31 49 49 49 46
			frames[0] = 0x31;
 426:	81 e3       	ldi	r24, 0x31	; 49
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	9a 83       	std	Y+2, r25	; 0x02
 42c:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 42e:	89 e4       	ldi	r24, 0x49	; 73
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	9c 83       	std	Y+4, r25	; 0x04
 434:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 436:	9e 83       	std	Y+6, r25	; 0x06
 438:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 43a:	98 87       	std	Y+8, r25	; 0x08
 43c:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 43e:	86 e4       	ldi	r24, 0x46	; 70
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	9a 87       	std	Y+10, r25	; 0x0a
 444:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 446:	45 e0       	ldi	r20, 0x05	; 5
 448:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 44a:	6c c1       	rjmp	.+728    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'T': case 't':
			//40 40 7F 40 40
			frames[0] = 0x40;
 44c:	80 e4       	ldi	r24, 0x40	; 64
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 454:	9c 83       	std	Y+4, r25	; 0x04
 456:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 458:	2f e7       	ldi	r18, 0x7F	; 127
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	3e 83       	std	Y+6, r19	; 0x06
 45e:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x40;
 460:	98 87       	std	Y+8, r25	; 0x08
 462:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x40;
 464:	9a 87       	std	Y+10, r25	; 0x0a
 466:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 468:	45 e0       	ldi	r20, 0x05	; 5
 46a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x40;
			frames[1] = 0x40;
			frames[2] = 0x7F;
			frames[3] = 0x40;
			frames[4] = 0x40;
			break;
 46c:	5b c1       	rjmp	.+694    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'U': case 'u':
			//7E 01 01 01 7E
			frames[0] = 0x7E;
 46e:	2e e7       	ldi	r18, 0x7E	; 126
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	3a 83       	std	Y+2, r19	; 0x02
 474:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x01;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9c 83       	std	Y+4, r25	; 0x04
 47c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 47e:	9e 83       	std	Y+6, r25	; 0x06
 480:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 482:	98 87       	std	Y+8, r25	; 0x08
 484:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 486:	3a 87       	std	Y+10, r19	; 0x0a
 488:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 48a:	45 e0       	ldi	r20, 0x05	; 5
 48c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7E;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 48e:	4a c1       	rjmp	.+660    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'V': case 'v':
			//7C 02 01 02 7C
			frames[0] = 0x7C;
 490:	8c e7       	ldi	r24, 0x7C	; 124
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 498:	22 e0       	ldi	r18, 0x02	; 2
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	3c 83       	std	Y+4, r19	; 0x04
 49e:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x01;
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	5e 83       	std	Y+6, r21	; 0x06
 4a6:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 4a8:	38 87       	std	Y+8, r19	; 0x08
 4aa:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7C;
 4ac:	9a 87       	std	Y+10, r25	; 0x0a
 4ae:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4b0:	45 e0       	ldi	r20, 0x05	; 5
 4b2:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7C;
			frames[1] = 0x02;
			frames[2] = 0x01;
			frames[3] = 0x02;
			frames[4] = 0x7C;
			break;
 4b4:	37 c1       	rjmp	.+622    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'W': case 'w':
			//7F 02 0C 02 7F
			frames[0] = 0x7F;
 4b6:	8f e7       	ldi	r24, 0x7F	; 127
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9a 83       	std	Y+2, r25	; 0x02
 4bc:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 4be:	22 e0       	ldi	r18, 0x02	; 2
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	3c 83       	std	Y+4, r19	; 0x04
 4c4:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x0C;
 4c6:	4c e0       	ldi	r20, 0x0C	; 12
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	5e 83       	std	Y+6, r21	; 0x06
 4cc:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 4ce:	38 87       	std	Y+8, r19	; 0x08
 4d0:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 4d2:	9a 87       	std	Y+10, r25	; 0x0a
 4d4:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4d6:	45 e0       	ldi	r20, 0x05	; 5
 4d8:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x02;
			frames[2] = 0x0C;
			frames[3] = 0x02;
			frames[4] = 0x7F;
			break;
 4da:	24 c1       	rjmp	.+584    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'X': case 'x':
			//63 14 08 14 63
			frames[0] = 0x63;
 4dc:	83 e6       	ldi	r24, 0x63	; 99
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x14;
 4e4:	24 e1       	ldi	r18, 0x14	; 20
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	3c 83       	std	Y+4, r19	; 0x04
 4ea:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 4ec:	48 e0       	ldi	r20, 0x08	; 8
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	5e 83       	std	Y+6, r21	; 0x06
 4f2:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x14;
 4f4:	38 87       	std	Y+8, r19	; 0x08
 4f6:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x63;
 4f8:	9a 87       	std	Y+10, r25	; 0x0a
 4fa:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4fc:	45 e0       	ldi	r20, 0x05	; 5
 4fe:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x63;
			frames[1] = 0x14;
			frames[2] = 0x08;
			frames[3] = 0x14;
			frames[4] = 0x63;
			break;
 500:	11 c1       	rjmp	.+546    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'Y': case 'y':
			//60 18 07 18 60
			frames[0] = 0x60;
 502:	80 e6       	ldi	r24, 0x60	; 96
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9a 83       	std	Y+2, r25	; 0x02
 508:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x18;
 50a:	28 e1       	ldi	r18, 0x18	; 24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	3c 83       	std	Y+4, r19	; 0x04
 510:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x07;
 512:	47 e0       	ldi	r20, 0x07	; 7
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	5e 83       	std	Y+6, r21	; 0x06
 518:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x18;
 51a:	38 87       	std	Y+8, r19	; 0x08
 51c:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x60;
 51e:	9a 87       	std	Y+10, r25	; 0x0a
 520:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 522:	45 e0       	ldi	r20, 0x05	; 5
 524:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x60;
			frames[1] = 0x18;
			frames[2] = 0x07;
			frames[3] = 0x18;
			frames[4] = 0x60;
			break;
 526:	fe c0       	rjmp	.+508    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case 'Z': case 'z':
			//43 45 49 51 61
			frames[0] = 0x43;
 528:	83 e4       	ldi	r24, 0x43	; 67
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	9a 83       	std	Y+2, r25	; 0x02
 52e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x45;
 530:	85 e4       	ldi	r24, 0x45	; 69
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	9c 83       	std	Y+4, r25	; 0x04
 536:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 538:	89 e4       	ldi	r24, 0x49	; 73
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	9e 83       	std	Y+6, r25	; 0x06
 53e:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x51;
 540:	81 e5       	ldi	r24, 0x51	; 81
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	98 87       	std	Y+8, r25	; 0x08
 546:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x61;
 548:	81 e6       	ldi	r24, 0x61	; 97
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	9a 87       	std	Y+10, r25	; 0x0a
 54e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 550:	45 e0       	ldi	r20, 0x05	; 5
 552:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x43;
			frames[1] = 0x45;
			frames[2] = 0x49;
			frames[3] = 0x51;
			frames[4] = 0x61;
			break;
 554:	e7 c0       	rjmp	.+462    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
			frames[4] = 0x00;
			break;
		case '.':
			//00 01 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x01;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	9c 83       	std	Y+4, r25	; 0x04
 55c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 55e:	43 e0       	ldi	r20, 0x03	; 3
 560:	50 e0       	ldi	r21, 0x00	; 0
			break;
 562:	e0 c0       	rjmp	.+448    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '?':
			//30 40 45 48 30
			frames[0] = 0x30;
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9a 83       	std	Y+2, r25	; 0x02
 56a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 56c:	20 e4       	ldi	r18, 0x40	; 64
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	3c 83       	std	Y+4, r19	; 0x04
 572:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 574:	25 e4       	ldi	r18, 0x45	; 69
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	3e 83       	std	Y+6, r19	; 0x06
 57a:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x48;
 57c:	28 e4       	ldi	r18, 0x48	; 72
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	38 87       	std	Y+8, r19	; 0x08
 582:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x30;
 584:	9a 87       	std	Y+10, r25	; 0x0a
 586:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 588:	45 e0       	ldi	r20, 0x05	; 5
 58a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x40;
			frames[2] = 0x45;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 58c:	cb c0       	rjmp	.+406    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '!':
			//00 7D 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x7D;
 58e:	8d e7       	ldi	r24, 0x7D	; 125
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9c 83       	std	Y+4, r25	; 0x04
 594:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 596:	43 e0       	ldi	r20, 0x03	; 3
 598:	50 e0       	ldi	r21, 0x00	; 0
			break;
 59a:	c4 c0       	rjmp	.+392    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '0':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 59c:	2e e3       	ldi	r18, 0x3E	; 62
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	3a 83       	std	Y+2, r19	; 0x02
 5a2:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 5a4:	81 e4       	ldi	r24, 0x41	; 65
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	9c 83       	std	Y+4, r25	; 0x04
 5aa:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 5ac:	9e 83       	std	Y+6, r25	; 0x06
 5ae:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 5b0:	98 87       	std	Y+8, r25	; 0x08
 5b2:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 5b4:	3a 87       	std	Y+10, r19	; 0x0a
 5b6:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5b8:	45 e0       	ldi	r20, 0x05	; 5
 5ba:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 5bc:	b3 c0       	rjmp	.+358    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '1':
			//11 21 7F 01 01
			frames[0] = 0x11;
 5be:	81 e1       	ldi	r24, 0x11	; 17
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	9a 83       	std	Y+2, r25	; 0x02
 5c4:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x21;
 5c6:	81 e2       	ldi	r24, 0x21	; 33
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	9c 83       	std	Y+4, r25	; 0x04
 5cc:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 5ce:	8f e7       	ldi	r24, 0x7F	; 127
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	9e 83       	std	Y+6, r25	; 0x06
 5d4:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	98 87       	std	Y+8, r25	; 0x08
 5dc:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 5de:	9a 87       	std	Y+10, r25	; 0x0a
 5e0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5e2:	45 e0       	ldi	r20, 0x05	; 5
 5e4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x11;
			frames[1] = 0x21;
			frames[2] = 0x7F;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 5e6:	9e c0       	rjmp	.+316    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '2':
			//31 43 45 49 31
			frames[0] = 0x31;
 5e8:	81 e3       	ldi	r24, 0x31	; 49
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9a 83       	std	Y+2, r25	; 0x02
 5ee:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x43;
 5f0:	23 e4       	ldi	r18, 0x43	; 67
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	3c 83       	std	Y+4, r19	; 0x04
 5f6:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 5f8:	25 e4       	ldi	r18, 0x45	; 69
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	3e 83       	std	Y+6, r19	; 0x06
 5fe:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x49;
 600:	29 e4       	ldi	r18, 0x49	; 73
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	38 87       	std	Y+8, r19	; 0x08
 606:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x31;
 608:	9a 87       	std	Y+10, r25	; 0x0a
 60a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 60c:	45 e0       	ldi	r20, 0x05	; 5
 60e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x43;
			frames[2] = 0x45;
			frames[3] = 0x49;
			frames[4] = 0x31;
			break;
 610:	89 c0       	rjmp	.+274    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '3':
			//22 49 49 49 36
			frames[0] = 0x22;
 612:	82 e2       	ldi	r24, 0x22	; 34
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	9a 83       	std	Y+2, r25	; 0x02
 618:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 61a:	89 e4       	ldi	r24, 0x49	; 73
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	9c 83       	std	Y+4, r25	; 0x04
 620:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 622:	9e 83       	std	Y+6, r25	; 0x06
 624:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 626:	98 87       	std	Y+8, r25	; 0x08
 628:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 62a:	86 e3       	ldi	r24, 0x36	; 54
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	9a 87       	std	Y+10, r25	; 0x0a
 630:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 632:	45 e0       	ldi	r20, 0x05	; 5
 634:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x22;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 636:	76 c0       	rjmp	.+236    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '4':
			//78 08 08 08 7F
			frames[0] = 0x78;
 638:	88 e7       	ldi	r24, 0x78	; 120
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	9a 83       	std	Y+2, r25	; 0x02
 63e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x08;
 640:	88 e0       	ldi	r24, 0x08	; 8
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9c 83       	std	Y+4, r25	; 0x04
 646:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 648:	9e 83       	std	Y+6, r25	; 0x06
 64a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 64c:	98 87       	std	Y+8, r25	; 0x08
 64e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 650:	8f e7       	ldi	r24, 0x7F	; 127
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	9a 87       	std	Y+10, r25	; 0x0a
 656:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 658:	45 e0       	ldi	r20, 0x05	; 5
 65a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x78;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 65c:	63 c0       	rjmp	.+198    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '5':
			//79 49 49 49 46
			frames[0] = 0x79;
 65e:	89 e7       	ldi	r24, 0x79	; 121
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	9a 83       	std	Y+2, r25	; 0x02
 664:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 666:	89 e4       	ldi	r24, 0x49	; 73
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	9c 83       	std	Y+4, r25	; 0x04
 66c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 66e:	9e 83       	std	Y+6, r25	; 0x06
 670:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 672:	98 87       	std	Y+8, r25	; 0x08
 674:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 676:	86 e4       	ldi	r24, 0x46	; 70
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	9a 87       	std	Y+10, r25	; 0x0a
 67c:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 67e:	45 e0       	ldi	r20, 0x05	; 5
 680:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x79;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 682:	50 c0       	rjmp	.+160    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '6':
			//3E 49 49 49 26
			frames[0] = 0x3E;
 684:	8e e3       	ldi	r24, 0x3E	; 62
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	9a 83       	std	Y+2, r25	; 0x02
 68a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 68c:	89 e4       	ldi	r24, 0x49	; 73
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	9c 83       	std	Y+4, r25	; 0x04
 692:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 694:	9e 83       	std	Y+6, r25	; 0x06
 696:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 698:	98 87       	std	Y+8, r25	; 0x08
 69a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x26;
 69c:	86 e2       	ldi	r24, 0x26	; 38
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	9a 87       	std	Y+10, r25	; 0x0a
 6a2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6a4:	45 e0       	ldi	r20, 0x05	; 5
 6a6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x26;
			break;
 6a8:	3d c0       	rjmp	.+122    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '7':
			//41 42 44 48 70
			frames[0] = 0x41;
 6aa:	81 e4       	ldi	r24, 0x41	; 65
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	9a 83       	std	Y+2, r25	; 0x02
 6b0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x42;
 6b2:	82 e4       	ldi	r24, 0x42	; 66
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	9c 83       	std	Y+4, r25	; 0x04
 6b8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x44;
 6ba:	84 e4       	ldi	r24, 0x44	; 68
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	9e 83       	std	Y+6, r25	; 0x06
 6c0:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 6c2:	88 e4       	ldi	r24, 0x48	; 72
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	98 87       	std	Y+8, r25	; 0x08
 6c8:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x70;
 6ca:	80 e7       	ldi	r24, 0x70	; 112
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	9a 87       	std	Y+10, r25	; 0x0a
 6d0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6d2:	45 e0       	ldi	r20, 0x05	; 5
 6d4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x42;
			frames[2] = 0x44;
			frames[3] = 0x48;
			frames[4] = 0x70;
			break;
 6d6:	26 c0       	rjmp	.+76     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '8':
			//36 49 49 49 36
			frames[0] = 0x36;
 6d8:	26 e3       	ldi	r18, 0x36	; 54
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	3a 83       	std	Y+2, r19	; 0x02
 6de:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x49;
 6e0:	89 e4       	ldi	r24, 0x49	; 73
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	9c 83       	std	Y+4, r25	; 0x04
 6e6:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 6e8:	9e 83       	std	Y+6, r25	; 0x06
 6ea:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 6ec:	98 87       	std	Y+8, r25	; 0x08
 6ee:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 6f0:	3a 87       	std	Y+10, r19	; 0x0a
 6f2:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6f4:	45 e0       	ldi	r20, 0x05	; 5
 6f6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x36;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 6f8:	15 c0       	rjmp	.+42     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
		case '9':
			//30 48 48 48 3F
			frames[0] = 0x30;
 6fa:	80 e3       	ldi	r24, 0x30	; 48
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	9a 83       	std	Y+2, r25	; 0x02
 700:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 702:	88 e4       	ldi	r24, 0x48	; 72
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	9c 83       	std	Y+4, r25	; 0x04
 708:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 70a:	9e 83       	std	Y+6, r25	; 0x06
 70c:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 70e:	98 87       	std	Y+8, r25	; 0x08
 710:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 712:	8f e3       	ldi	r24, 0x3F	; 63
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9a 87       	std	Y+10, r25	; 0x0a
 718:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 71a:	45 e0       	ldi	r20, 0x05	; 5
 71c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x3F;
			break;
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 720:	45 e0       	ldi	r20, 0x05	; 5
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	fe 01       	movw	r30, r28
 726:	31 96       	adiw	r30, 0x01	; 1
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	30 e0       	ldi	r19, 0x00	; 0
	}


	//Go through each of the frames and output them on the ports
	for(int i = 0; i < numFrames; i++) {
		currentFrameValue = frames[i];
 72c:	81 91       	ld	r24, Z+
 72e:	91 91       	ld	r25, Z+
		//No shift is needed for the PORTB
		PORTB = currentFrameValue;
 730:	85 b9       	out	0x05, r24	; 5
		//Shift the binary value to the right by 6 for PORTC
		PORTC = currentFrameValue >> 6;
 732:	00 24       	eor	r0, r0
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	00 1c       	adc	r0, r0
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	00 1c       	adc	r0, r0
 740:	89 2f       	mov	r24, r25
 742:	90 2d       	mov	r25, r0
 744:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 746:	8f e0       	ldi	r24, 0x0F	; 15
 748:	97 e2       	ldi	r25, 0x27	; 39
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
 750:	00 00       	nop
			break;
	}


	//Go through each of the frames and output them on the ports
	for(int i = 0; i < numFrames; i++) {
 752:	2f 5f       	subi	r18, 0xFF	; 255
 754:	3f 4f       	sbci	r19, 0xFF	; 255
 756:	24 17       	cp	r18, r20
 758:	35 07       	cpc	r19, r21
 75a:	40 f3       	brcs	.-48     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
		PORTC = currentFrameValue >> 6;
		delay();
	}

	// Add an empty frame to separate letters from each other
	PORTB = 0x00;
 75c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 75e:	18 b8       	out	0x08, r1	; 8
 760:	af e0       	ldi	r26, 0x0F	; 15
 762:	b7 e2       	ldi	r27, 0x27	; 39
 764:	11 97       	sbiw	r26, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
 768:	00 c0       	rjmp	.+0      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
 76a:	00 00       	nop
	delay();

}
 76c:	2a 96       	adiw	r28, 0x0a	; 10
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <USART_init>:
	return;
}

void USART_init(void){

	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 77e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 782:	87 e6       	ldi	r24, 0x67	; 103
 784:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 788:	88 e1       	ldi	r24, 0x18	; 24
 78a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 794:	08 95       	ret

00000796 <USART_receive>:
}

unsigned char USART_receive(void){
	if((UCSR0A & (1<<RXC0))){
 796:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 79a:	88 23       	and	r24, r24
 79c:	1c f4       	brge	.+6      	; 0x7a4 <USART_receive+0xe>
		return UDR0;
 79e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7a2:	08 95       	ret
	}
	return '\0';
 7a4:	80 e0       	ldi	r24, 0x00	; 0
}
 7a6:	08 95       	ret

000007a8 <USART_send>:

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 7a8:	e0 ec       	ldi	r30, 0xC0	; 192
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	90 81       	ld	r25, Z
 7ae:	95 ff       	sbrs	r25, 5
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <USART_send+0x4>
	UDR0 = data;
 7b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7b6:	08 95       	ret

000007b8 <get_input>:
	PORTC = 0x00;
	delay();

}

void get_input(char * text, int length){
 7b8:	ef 92       	push	r14
 7ba:	ff 92       	push	r15
 7bc:	0f 93       	push	r16
 7be:	1f 93       	push	r17
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
	for(int i = 0; i < length; i++){
 7c4:	16 16       	cp	r1, r22
 7c6:	17 06       	cpc	r1, r23
 7c8:	2c f5       	brge	.+74     	; 0x814 <get_input+0x5c>
 7ca:	8c 01       	movw	r16, r24
 7cc:	9c 01       	movw	r18, r24
 7ce:	26 0f       	add	r18, r22
 7d0:	37 1f       	adc	r19, r23
 7d2:	fc 01       	movw	r30, r24
		text[i] = '\0';
 7d4:	11 92       	st	Z+, r1
	delay();

}

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
 7d6:	2e 17       	cp	r18, r30
 7d8:	3f 07       	cpc	r19, r31
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <get_input+0x1c>
 7dc:	7b 01       	movw	r14, r22
 7de:	c0 e0       	ldi	r28, 0x00	; 0
 7e0:	d0 e0       	ldi	r29, 0x00	; 0
		text[i] = '\0';
	}
	for(int i = 0; i < length; i++){
		ASCII = '\0';
 7e2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		while(ASCII == '\0' || ASCII == '`'){
			ASCII = USART_receive();
 7e6:	d7 df       	rcall	.-82     	; 0x796 <USART_receive>
 7e8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	for(int i = 0; i < length; i++){
		text[i] = '\0';
	}
	for(int i = 0; i < length; i++){
		ASCII = '\0';
		while(ASCII == '\0' || ASCII == '`'){
 7ec:	88 23       	and	r24, r24
 7ee:	d9 f3       	breq	.-10     	; 0x7e6 <get_input+0x2e>
 7f0:	80 36       	cpi	r24, 0x60	; 96
 7f2:	c9 f3       	breq	.-14     	; 0x7e6 <get_input+0x2e>
			ASCII = USART_receive();
		}
		if(ASCII == '\x0D')break;
 7f4:	8d 30       	cpi	r24, 0x0D	; 13
 7f6:	71 f0       	breq	.+28     	; 0x814 <get_input+0x5c>
		text[i] = ASCII;
 7f8:	f8 01       	movw	r30, r16
 7fa:	81 93       	st	Z+, r24
 7fc:	8f 01       	movw	r16, r30
		USART_send(ASCII);
 7fe:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 802:	d2 df       	rcall	.-92     	; 0x7a8 <USART_send>
		eeprom_write_byte((uint8_t *)i, ASCII);
 804:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <__data_end>
 808:	ce 01       	movw	r24, r28
 80a:	7e d0       	rcall	.+252    	; 0x908 <eeprom_write_byte>

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
		text[i] = '\0';
	}
	for(int i = 0; i < length; i++){
 80c:	21 96       	adiw	r28, 0x01	; 1
 80e:	ec 16       	cp	r14, r28
 810:	fd 06       	cpc	r15, r29
 812:	39 f7       	brne	.-50     	; 0x7e2 <get_input+0x2a>
		text[i] = ASCII;
		USART_send(ASCII);
		eeprom_write_byte((uint8_t *)i, ASCII);
	}
	return;
}
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	1f 91       	pop	r17
 81a:	0f 91       	pop	r16
 81c:	ff 90       	pop	r15
 81e:	ef 90       	pop	r14
 820:	08 95       	ret

00000822 <USART_putstring>:
void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 828:	88 81       	ld	r24, Y
 82a:	88 23       	and	r24, r24
 82c:	29 f0       	breq	.+10     	; 0x838 <USART_putstring+0x16>
 82e:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 830:	bb df       	rcall	.-138    	; 0x7a8 <USART_send>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
 832:	89 91       	ld	r24, Y+
 834:	81 11       	cpse	r24, r1
 836:	fc cf       	rjmp	.-8      	; 0x830 <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <main>:

// Constants
const double DELAY_MS = 2.50; // Adjust this variable to adjust the delay between each frame

int main (void)
{
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
 846:	2a 97       	sbiw	r28, 0x0a	; 10
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
	int TEXT_LENGTH = 10;
	char TEXT[TEXT_LENGTH];
	//Set all pins on PORT B and C to output
	DDRB = 0b00111111;
 852:	8f e3       	ldi	r24, 0x3F	; 63
 854:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000001;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	87 b9       	out	0x07, r24	; 7

	eeprom_read_block((void *)&TEXT, (const void *)0, TEXT_LENGTH); //reads the eeprom on load
 85a:	4a e0       	ldi	r20, 0x0A	; 10
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	ce 01       	movw	r24, r28
 864:	01 96       	adiw	r24, 0x01	; 1
 866:	40 d0       	rcall	.+128    	; 0x8e8 <eeprom_read_block>

	//Initialize the board
	board_init();
 868:	75 dc       	rcall	.-1814   	; 0x154 <board_init>
	//Initialize the USART
	USART_init();
 86a:	89 df       	rcall	.-238    	; 0x77e <USART_init>
 86c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	ASCII = '\0';
 870:	7e 01       	movw	r14, r28
 872:	8b e0       	ldi	r24, 0x0B	; 11
 874:	e8 0e       	add	r14, r24
 876:	f1 1c       	adc	r15, r1
	while(1) {
 		ASCII = USART_receive();
 878:	8e df       	rcall	.-228    	; 0x796 <USART_receive>
 87a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 87e:	80 36       	cpi	r24, 0x60	; 96
 		if(ASCII == '`'){
 880:	29 f5       	brne	.+74     	; 0x8cc <main+0x8e>
 			USART_putstring("Type up to 10 characters\n\r\t");
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	cd df       	rcall	.-102    	; 0x822 <USART_putstring>
 			get_input(TEXT, TEXT_LENGTH);
 888:	6a e0       	ldi	r22, 0x0A	; 10
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	93 df       	rcall	.-218    	; 0x7b8 <get_input>
			USART_putstring("\n\rWord set to ");
 892:	8c e1       	ldi	r24, 0x1C	; 28
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	c5 df       	rcall	.-118    	; 0x822 <USART_putstring>
 898:	8e 01       	movw	r16, r28
 89a:	0f 5f       	subi	r16, 0xFF	; 255
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
 89e:	f8 01       	movw	r30, r16
 8a0:	81 91       	ld	r24, Z+
 8a2:	8f 01       	movw	r16, r30
 8a4:	81 df       	rcall	.-254    	; 0x7a8 <USART_send>
 		ASCII = USART_receive();
 		if(ASCII == '`'){
 			USART_putstring("Type up to 10 characters\n\r\t");
 			get_input(TEXT, TEXT_LENGTH);
			USART_putstring("\n\rWord set to ");
			for(int i = 0; i < TEXT_LENGTH; i++){
 8a6:	e0 16       	cp	r14, r16
 8a8:	f1 06       	cpc	r15, r17
 8aa:	c9 f7       	brne	.-14     	; 0x89e <main+0x60>
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 8ac:	8b e2       	ldi	r24, 0x2B	; 43
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	b8 df       	rcall	.-144    	; 0x822 <USART_putstring>
 8b2:	0c c0       	rjmp	.+24     	; 0x8cc <main+0x8e>
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
			if(TEXT[i] == '\0')break;
 8b4:	f8 01       	movw	r30, r16
 8b6:	81 91       	ld	r24, Z+
 8b8:	8f 01       	movw	r16, r30
 8ba:	88 23       	and	r24, r24
			displayCharacter(TEXT[i]);
 8bc:	21 f0       	breq	.+8      	; 0x8c6 <main+0x88>
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
 8be:	53 dc       	rcall	.-1882   	; 0x166 <displayCharacter>
 8c0:	e0 16       	cp	r14, r16
 8c2:	f1 06       	cpc	r15, r17
			if(TEXT[i] == '\0')break;
			displayCharacter(TEXT[i]);
		}
		//Add a space in between each rotation
		displayCharacter(' ');
 8c4:	b9 f7       	brne	.-18     	; 0x8b4 <main+0x76>
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	4e dc       	rcall	.-1892   	; 0x166 <displayCharacter>
	}
 8ca:	d6 cf       	rjmp	.-84     	; 0x878 <main+0x3a>
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
			if(TEXT[i] == '\0')break;
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	88 23       	and	r24, r24
 8d0:	d1 f3       	breq	.-12     	; 0x8c6 <main+0x88>
			displayCharacter(TEXT[i]);
 8d2:	49 dc       	rcall	.-1902   	; 0x166 <displayCharacter>
 8d4:	8e 01       	movw	r16, r28
 8d6:	0e 5f       	subi	r16, 0xFE	; 254
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	ec cf       	rjmp	.-40     	; 0x8b4 <main+0x76>

000008dc <__tablejump2__>:
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	05 90       	lpm	r0, Z+
 8e2:	f4 91       	lpm	r31, Z
 8e4:	e0 2d       	mov	r30, r0
 8e6:	09 94       	ijmp

000008e8 <eeprom_read_block>:
 8e8:	dc 01       	movw	r26, r24
 8ea:	cb 01       	movw	r24, r22

000008ec <eeprom_read_blraw>:
 8ec:	fc 01       	movw	r30, r24
 8ee:	f9 99       	sbic	0x1f, 1	; 31
 8f0:	fe cf       	rjmp	.-4      	; 0x8ee <eeprom_read_blraw+0x2>
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0x1>
 8f4:	f2 bd       	out	0x22, r31	; 34
 8f6:	e1 bd       	out	0x21, r30	; 33
 8f8:	f8 9a       	sbi	0x1f, 0	; 31
 8fa:	31 96       	adiw	r30, 0x01	; 1
 8fc:	00 b4       	in	r0, 0x20	; 32
 8fe:	0d 92       	st	X+, r0
 900:	41 50       	subi	r20, 0x01	; 1
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	b8 f7       	brcc	.-18     	; 0x8f4 <eeprom_read_blraw+0x8>
 906:	08 95       	ret

00000908 <eeprom_write_byte>:
 908:	26 2f       	mov	r18, r22

0000090a <eeprom_write_r18>:
 90a:	f9 99       	sbic	0x1f, 1	; 31
 90c:	fe cf       	rjmp	.-4      	; 0x90a <eeprom_write_r18>
 90e:	1f ba       	out	0x1f, r1	; 31
 910:	92 bd       	out	0x22, r25	; 34
 912:	81 bd       	out	0x21, r24	; 33
 914:	20 bd       	out	0x20, r18	; 32
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	fa 9a       	sbi	0x1f, 2	; 31
 91c:	f9 9a       	sbi	0x1f, 1	; 31
 91e:	0f be       	out	0x3f, r0	; 63
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	08 95       	ret

00000924 <_exit>:
 924:	f8 94       	cli

00000926 <__stop_program>:
 926:	ff cf       	rjmp	.-2      	; 0x926 <__stop_program>
