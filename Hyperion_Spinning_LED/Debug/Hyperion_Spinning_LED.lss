
Hyperion_Spinning_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000008d8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800126  00800126  00000992  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f33  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150a  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000038a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010ae0  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  00014488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00014906  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000a5f  00000000  00000000  0001495e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	92 c0       	rjmp	.+292    	; 0x12a <__bad_interrupt>
   6:	00 00       	nop
   8:	90 c0       	rjmp	.+288    	; 0x12a <__bad_interrupt>
   a:	00 00       	nop
   c:	8e c0       	rjmp	.+284    	; 0x12a <__bad_interrupt>
   e:	00 00       	nop
  10:	8c c0       	rjmp	.+280    	; 0x12a <__bad_interrupt>
  12:	00 00       	nop
  14:	8a c0       	rjmp	.+276    	; 0x12a <__bad_interrupt>
  16:	00 00       	nop
  18:	88 c0       	rjmp	.+272    	; 0x12a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c0       	rjmp	.+268    	; 0x12a <__bad_interrupt>
  1e:	00 00       	nop
  20:	84 c0       	rjmp	.+264    	; 0x12a <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c0       	rjmp	.+260    	; 0x12a <__bad_interrupt>
  26:	00 00       	nop
  28:	80 c0       	rjmp	.+256    	; 0x12a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7e c0       	rjmp	.+252    	; 0x12a <__bad_interrupt>
  2e:	00 00       	nop
  30:	7c c0       	rjmp	.+248    	; 0x12a <__bad_interrupt>
  32:	00 00       	nop
  34:	7a c0       	rjmp	.+244    	; 0x12a <__bad_interrupt>
  36:	00 00       	nop
  38:	78 c0       	rjmp	.+240    	; 0x12a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	76 c0       	rjmp	.+236    	; 0x12a <__bad_interrupt>
  3e:	00 00       	nop
  40:	74 c0       	rjmp	.+232    	; 0x12a <__bad_interrupt>
  42:	00 00       	nop
  44:	72 c0       	rjmp	.+228    	; 0x12a <__bad_interrupt>
  46:	00 00       	nop
  48:	70 c0       	rjmp	.+224    	; 0x12a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6e c0       	rjmp	.+220    	; 0x12a <__bad_interrupt>
  4e:	00 00       	nop
  50:	6c c0       	rjmp	.+216    	; 0x12a <__bad_interrupt>
  52:	00 00       	nop
  54:	6a c0       	rjmp	.+212    	; 0x12a <__bad_interrupt>
  56:	00 00       	nop
  58:	68 c0       	rjmp	.+208    	; 0x12a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	66 c0       	rjmp	.+204    	; 0x12a <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c0       	rjmp	.+200    	; 0x12a <__bad_interrupt>
  62:	00 00       	nop
  64:	62 c0       	rjmp	.+196    	; 0x12a <__bad_interrupt>
  66:	00 00       	nop
  68:	b3 02       	muls	r27, r19
  6a:	7c 03       	fmul	r23, r20
  6c:	7c 03       	fmul	r23, r20
  6e:	7c 03       	fmul	r23, r20
  70:	7c 03       	fmul	r23, r20
  72:	7c 03       	fmul	r23, r20
  74:	7c 03       	fmul	r23, r20
  76:	7c 03       	fmul	r23, r20
  78:	7c 03       	fmul	r23, r20
  7a:	7c 03       	fmul	r23, r20
  7c:	7c 03       	fmul	r23, r20
  7e:	7c 03       	fmul	r23, r20
  80:	7c 03       	fmul	r23, r20
  82:	97 02       	muls	r25, r23
  84:	7c 03       	fmul	r23, r20
  86:	ba 02       	muls	r27, r26
  88:	cb 02       	muls	r28, r27
  8a:	e0 02       	muls	r30, r16
  8c:	f5 02       	muls	r31, r21
  8e:	08 03       	fmul	r16, r16
  90:	1b 03       	fmul	r17, r19
  92:	2e 03       	fmul	r18, r22
  94:	41 03       	mulsu	r20, r17
  96:	58 03       	fmul	r21, r16
  98:	69 03       	fmul	r22, r17
  9a:	7c 03       	fmul	r23, r20
  9c:	7c 03       	fmul	r23, r20
  9e:	7c 03       	fmul	r23, r20
  a0:	7c 03       	fmul	r23, r20
  a2:	7c 03       	fmul	r23, r20
  a4:	9e 02       	muls	r25, r30
  a6:	7c 03       	fmul	r23, r20
  a8:	7c 03       	fmul	r23, r20
  aa:	7c 03       	fmul	r23, r20
  ac:	7c 03       	fmul	r23, r20
  ae:	7c 03       	fmul	r23, r20
  b0:	7c 03       	fmul	r23, r20
  b2:	7c 03       	fmul	r23, r20
  b4:	2e 01       	movw	r4, r28
  b6:	43 01       	movw	r8, r6
  b8:	54 01       	movw	r10, r8
  ba:	65 01       	movw	r12, r10
  bc:	78 01       	movw	r14, r16
  be:	78 01       	movw	r14, r16
  c0:	89 01       	movw	r16, r18
  c2:	9c 01       	movw	r18, r24
  c4:	b1 01       	movw	r22, r2
  c6:	c2 01       	movw	r24, r4
  c8:	d5 01       	movw	r26, r10
  ca:	ec 01       	movw	r28, r24
  cc:	ff 01       	movw	r30, r30
  ce:	12 02       	muls	r17, r18
  d0:	23 02       	muls	r18, r19
  d2:	34 02       	muls	r19, r20
  d4:	47 02       	muls	r20, r23
  d6:	5a 02       	muls	r21, r26
  d8:	6d 02       	muls	r22, r29
  da:	80 02       	muls	r24, r16
  dc:	7c 03       	fmul	r23, r20
  de:	7c 03       	fmul	r23, r20
  e0:	7c 03       	fmul	r23, r20
  e2:	7c 03       	fmul	r23, r20
  e4:	7c 03       	fmul	r23, r20
  e6:	7c 03       	fmul	r23, r20
  e8:	c0 00       	.word	0x00c0	; ????
  ea:	d3 00       	.word	0x00d3	; ????
  ec:	e6 00       	.word	0x00e6	; ????
  ee:	f9 00       	.word	0x00f9	; ????
  f0:	0c 01       	movw	r0, r24
  f2:	1d 01       	movw	r2, r26

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d8 e0       	ldi	r29, 0x08	; 8
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	e8 ed       	ldi	r30, 0xD8	; 216
 108:	f8 e0       	ldi	r31, 0x08	; 8
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	a6 32       	cpi	r26, 0x26	; 38
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	a7 32       	cpi	r26, 0x27	; 39
 122:	b2 07       	cpc	r27, r18
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	6e d3       	rcall	.+1756   	; 0x804 <main>
 128:	d5 c3       	rjmp	.+1962   	; 0x8d4 <_exit>

0000012a <__bad_interrupt>:
 12a:	6a cf       	rjmp	.-300    	; 0x0 <__vectors>

0000012c <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 12c:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8f 77       	andi	r24, 0x7F	; 127
 134:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 136:	89 2f       	mov	r24, r25
 138:	80 6a       	ori	r24, 0xA0	; 160
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	08 95       	ret

0000013e <displayCharacter>:
}

// Displays the character with the LED
// For each "frame", change the LEDs to the new pattern
// Each frame is given in hex
void displayCharacter (char character) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	2a 97       	sbiw	r28, 0x0a	; 10
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	e8 2f       	mov	r30, r24
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
	unsigned int currentFrameValue = 0;
	unsigned int frames[5] = {0x00,0x00,0x00,0x00,0x00}; 
 154:	9e 01       	movw	r18, r28
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	d9 01       	movw	r26, r18
 15e:	1d 92       	st	X+, r1
 160:	8a 95       	dec	r24
 162:	e9 f7       	brne	.-6      	; 0x15e <displayCharacter+0x20>

	switch (character)
 164:	8e 2f       	mov	r24, r30
 166:	ee 0f       	add	r30, r30
 168:	99 0b       	sbc	r25, r25
 16a:	aa 0b       	sbc	r26, r26
 16c:	bb 0b       	sbc	r27, r27
 16e:	fc 01       	movw	r30, r24
 170:	b1 97       	sbiw	r30, 0x21	; 33
 172:	e6 34       	cpi	r30, 0x46	; 70
 174:	f1 05       	cpc	r31, r1
 176:	08 f0       	brcs	.+2      	; 0x17a <displayCharacter+0x3c>
 178:	bf c2       	rjmp	.+1406   	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 17a:	ec 5c       	subi	r30, 0xCC	; 204
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	86 c3       	rjmp	.+1804   	; 0x88c <__tablejump2__>
	{
		case 'A' | 'a':
			//1F 24 44 24 1F
			frames[0] = 0x1F;
 180:	8f e1       	ldi	r24, 0x1F	; 31
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x24;
 188:	24 e2       	ldi	r18, 0x24	; 36
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	3c 83       	std	Y+4, r19	; 0x04
 18e:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x44;
 190:	44 e4       	ldi	r20, 0x44	; 68
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	5e 83       	std	Y+6, r21	; 0x06
 196:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x24;
 198:	38 87       	std	Y+8, r19	; 0x08
 19a:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x1F;
 19c:	9a 87       	std	Y+10, r25	; 0x0a
 19e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1a0:	45 e0       	ldi	r20, 0x05	; 5
 1a2:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x1F;
			frames[1] = 0x24;
			frames[2] = 0x44;
			frames[3] = 0x24;
			frames[4] = 0x1F;
			break;
 1a4:	ab c2       	rjmp	.+1366   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'B' | 'b':
			//7F 49 49 49 36
			frames[0] = 0x7F;
 1a6:	8f e7       	ldi	r24, 0x7F	; 127
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9a 83       	std	Y+2, r25	; 0x02
 1ac:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 1ae:	89 e4       	ldi	r24, 0x49	; 73
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9c 83       	std	Y+4, r25	; 0x04
 1b4:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 1b6:	9e 83       	std	Y+6, r25	; 0x06
 1b8:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 1ba:	98 87       	std	Y+8, r25	; 0x08
 1bc:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 1be:	86 e3       	ldi	r24, 0x36	; 54
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	9a 87       	std	Y+10, r25	; 0x0a
 1c4:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1c6:	45 e0       	ldi	r20, 0x05	; 5
 1c8:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 1ca:	98 c2       	rjmp	.+1328   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'C' | 'c':
			//3E 41 41 41 22
			frames[0] = 0x3E;
 1cc:	8e e3       	ldi	r24, 0x3E	; 62
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9c 83       	std	Y+4, r25	; 0x04
 1da:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 1dc:	9e 83       	std	Y+6, r25	; 0x06
 1de:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 1e0:	98 87       	std	Y+8, r25	; 0x08
 1e2:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x22;
 1e4:	82 e2       	ldi	r24, 0x22	; 34
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1ec:	45 e0       	ldi	r20, 0x05	; 5
 1ee:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x22;
			break;
 1f0:	85 c2       	rjmp	.+1290   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'D' | 'd':
			//7F 41 41 41 3E
			frames[0] = 0x7F;
 1f2:	8f e7       	ldi	r24, 0x7F	; 127
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 200:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 202:	9e 83       	std	Y+6, r25	; 0x06
 204:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 206:	98 87       	std	Y+8, r25	; 0x08
 208:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 20a:	8e e3       	ldi	r24, 0x3E	; 62
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9a 87       	std	Y+10, r25	; 0x0a
 210:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 212:	45 e0       	ldi	r20, 0x05	; 5
 214:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 216:	72 c2       	rjmp	.+1252   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'E' | 'e':
			//7F 49 49 49 49
			frames[0] = 0x7F;
 218:	8f e7       	ldi	r24, 0x7F	; 127
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 220:	89 e4       	ldi	r24, 0x49	; 73
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	9c 83       	std	Y+4, r25	; 0x04
 226:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 228:	9e 83       	std	Y+6, r25	; 0x06
 22a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 22c:	98 87       	std	Y+8, r25	; 0x08
 22e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x49;
 230:	9a 87       	std	Y+10, r25	; 0x0a
 232:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 234:	45 e0       	ldi	r20, 0x05	; 5
 236:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x49;
			break;
 238:	61 c2       	rjmp	.+1218   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'F' | 'f':
			//7F 48 48 48 48
			frames[0] = 0x7F;
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 242:	88 e4       	ldi	r24, 0x48	; 72
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9c 83       	std	Y+4, r25	; 0x04
 248:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 24a:	9e 83       	std	Y+6, r25	; 0x06
 24c:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 24e:	98 87       	std	Y+8, r25	; 0x08
 250:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x48;
 252:	9a 87       	std	Y+10, r25	; 0x0a
 254:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 256:	45 e0       	ldi	r20, 0x05	; 5
 258:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x48;
			break;
 25a:	50 c2       	rjmp	.+1184   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'G':
			//3E 41 49 49 2E
			frames[0] = 0x3E;
 25c:	8e e3       	ldi	r24, 0x3E	; 62
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 26c:	89 e4       	ldi	r24, 0x49	; 73
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	9e 83       	std	Y+6, r25	; 0x06
 272:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 274:	98 87       	std	Y+8, r25	; 0x08
 276:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x2E;
 278:	8e e2       	ldi	r24, 0x2E	; 46
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9a 87       	std	Y+10, r25	; 0x0a
 27e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 280:	45 e0       	ldi	r20, 0x05	; 5
 282:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x2E;
			break;
 284:	3b c2       	rjmp	.+1142   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'H':
			//7F 08 08 08 7F
			frames[0] = 0x7F;
 286:	2f e7       	ldi	r18, 0x7F	; 127
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3a 83       	std	Y+2, r19	; 0x02
 28c:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x08;
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 83       	std	Y+4, r25	; 0x04
 294:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 296:	9e 83       	std	Y+6, r25	; 0x06
 298:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 29a:	98 87       	std	Y+8, r25	; 0x08
 29c:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 29e:	3a 87       	std	Y+10, r19	; 0x0a
 2a0:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2a2:	45 e0       	ldi	r20, 0x05	; 5
 2a4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 2a6:	2a c2       	rjmp	.+1108   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'I':
			//41 41 7F 41 41
			frames[0] = 0x41;
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9a 83       	std	Y+2, r25	; 0x02
 2ae:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 2b0:	9c 83       	std	Y+4, r25	; 0x04
 2b2:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 2b4:	2f e7       	ldi	r18, 0x7F	; 127
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3e 83       	std	Y+6, r19	; 0x06
 2ba:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x41;
 2bc:	98 87       	std	Y+8, r25	; 0x08
 2be:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x41;
 2c0:	9a 87       	std	Y+10, r25	; 0x0a
 2c2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2c4:	45 e0       	ldi	r20, 0x05	; 5
 2c6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x41;
			frames[2] = 0x7F;
			frames[3] = 0x41;
			frames[4] = 0x41;
			break;
 2c8:	19 c2       	rjmp	.+1074   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'J':
			//02 01 01 01 7E
			frames[0] = 0x02;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	9c 83       	std	Y+4, r25	; 0x04
 2d8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 2da:	9e 83       	std	Y+6, r25	; 0x06
 2dc:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 2de:	98 87       	std	Y+8, r25	; 0x08
 2e0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 2e2:	8e e7       	ldi	r24, 0x7E	; 126
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9a 87       	std	Y+10, r25	; 0x0a
 2e8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2ea:	45 e0       	ldi	r20, 0x05	; 5
 2ec:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x02;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 2ee:	06 c2       	rjmp	.+1036   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
			frames[2] = 0x14;
			frames[3] = 0x22;
			frames[4] = 0x41;
		case 'L':
			//7F 01 01 01 01
			frames[0] = 0x7F;
 2f0:	8f e7       	ldi	r24, 0x7F	; 127
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9c 83       	std	Y+4, r25	; 0x04
 2fe:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 300:	9e 83       	std	Y+6, r25	; 0x06
 302:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 304:	98 87       	std	Y+8, r25	; 0x08
 306:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 308:	9a 87       	std	Y+10, r25	; 0x0a
 30a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 30c:	45 e0       	ldi	r20, 0x05	; 5
 30e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 310:	f5 c1       	rjmp	.+1002   	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'M':
			//7F 20 18 20 7F
			frames[0] = 0x7F;
 312:	8f e7       	ldi	r24, 0x7F	; 127
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	9a 83       	std	Y+2, r25	; 0x02
 318:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x20;
 31a:	20 e2       	ldi	r18, 0x20	; 32
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	3c 83       	std	Y+4, r19	; 0x04
 320:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x18;
 322:	48 e1       	ldi	r20, 0x18	; 24
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	5e 83       	std	Y+6, r21	; 0x06
 328:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x20;
 32a:	38 87       	std	Y+8, r19	; 0x08
 32c:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 32e:	9a 87       	std	Y+10, r25	; 0x0a
 330:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 332:	45 e0       	ldi	r20, 0x05	; 5
 334:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x20;
			frames[2] = 0x18;
			frames[3] = 0x20;
			frames[4] = 0x7F;
			break;
 336:	e2 c1       	rjmp	.+964    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'N':
			//7F 10 08 04 7F
			frames[0] = 0x7F;
 338:	8f e7       	ldi	r24, 0x7F	; 127
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x10;
 340:	20 e1       	ldi	r18, 0x10	; 16
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	3c 83       	std	Y+4, r19	; 0x04
 346:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 348:	28 e0       	ldi	r18, 0x08	; 8
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	3e 83       	std	Y+6, r19	; 0x06
 34e:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x04;
 350:	24 e0       	ldi	r18, 0x04	; 4
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	38 87       	std	Y+8, r19	; 0x08
 356:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 358:	9a 87       	std	Y+10, r25	; 0x0a
 35a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 35c:	45 e0       	ldi	r20, 0x05	; 5
 35e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x10;
			frames[2] = 0x08;
			frames[3] = 0x04;
			frames[4] = 0x7F;
			break;
 360:	cd c1       	rjmp	.+922    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'O':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 362:	2e e3       	ldi	r18, 0x3E	; 62
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3a 83       	std	Y+2, r19	; 0x02
 368:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 36a:	81 e4       	ldi	r24, 0x41	; 65
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9c 83       	std	Y+4, r25	; 0x04
 370:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 372:	9e 83       	std	Y+6, r25	; 0x06
 374:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 376:	98 87       	std	Y+8, r25	; 0x08
 378:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 37a:	3a 87       	std	Y+10, r19	; 0x0a
 37c:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 37e:	45 e0       	ldi	r20, 0x05	; 5
 380:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 382:	bc c1       	rjmp	.+888    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'P':
			//7F 48 48 48 30
			frames[0] = 0x7F;
 384:	8f e7       	ldi	r24, 0x7F	; 127
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 38c:	88 e4       	ldi	r24, 0x48	; 72
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	9c 83       	std	Y+4, r25	; 0x04
 392:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 394:	9e 83       	std	Y+6, r25	; 0x06
 396:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 398:	98 87       	std	Y+8, r25	; 0x08
 39a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x30;
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	9a 87       	std	Y+10, r25	; 0x0a
 3a2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3a4:	45 e0       	ldi	r20, 0x05	; 5
 3a6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 3a8:	a9 c1       	rjmp	.+850    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'Q':
			//3E 41 45 43 3F
			frames[0] = 0x3E;
 3aa:	8e e3       	ldi	r24, 0x3E	; 62
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 3b2:	81 e4       	ldi	r24, 0x41	; 65
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	9c 83       	std	Y+4, r25	; 0x04
 3b8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x45;
 3ba:	85 e4       	ldi	r24, 0x45	; 69
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	9e 83       	std	Y+6, r25	; 0x06
 3c0:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x43;
 3c2:	83 e4       	ldi	r24, 0x43	; 67
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	98 87       	std	Y+8, r25	; 0x08
 3c8:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9a 87       	std	Y+10, r25	; 0x0a
 3d0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3d2:	45 e0       	ldi	r20, 0x05	; 5
 3d4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x45;
			frames[3] = 0x43;
			frames[4] = 0x3F;
			break;
 3d6:	92 c1       	rjmp	.+804    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'R':
			//7F 48 48 48 37
			frames[0] = 0x7F;
 3d8:	8f e7       	ldi	r24, 0x7F	; 127
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9a 83       	std	Y+2, r25	; 0x02
 3de:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 3e0:	88 e4       	ldi	r24, 0x48	; 72
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	9c 83       	std	Y+4, r25	; 0x04
 3e6:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 3e8:	9e 83       	std	Y+6, r25	; 0x06
 3ea:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 3ec:	98 87       	std	Y+8, r25	; 0x08
 3ee:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x37;
 3f0:	87 e3       	ldi	r24, 0x37	; 55
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	9a 87       	std	Y+10, r25	; 0x0a
 3f6:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3f8:	45 e0       	ldi	r20, 0x05	; 5
 3fa:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x37;
			break;
 3fc:	7f c1       	rjmp	.+766    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'S':
			//31 49 49 49 46
			frames[0] = 0x31;
 3fe:	81 e3       	ldi	r24, 0x31	; 49
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9a 83       	std	Y+2, r25	; 0x02
 404:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 406:	89 e4       	ldi	r24, 0x49	; 73
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9c 83       	std	Y+4, r25	; 0x04
 40c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 40e:	9e 83       	std	Y+6, r25	; 0x06
 410:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 412:	98 87       	std	Y+8, r25	; 0x08
 414:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 416:	86 e4       	ldi	r24, 0x46	; 70
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9a 87       	std	Y+10, r25	; 0x0a
 41c:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 41e:	45 e0       	ldi	r20, 0x05	; 5
 420:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 422:	6c c1       	rjmp	.+728    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'T':
			//40 40 7F 40 40
			frames[0] = 0x40;
 424:	80 e4       	ldi	r24, 0x40	; 64
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	9a 83       	std	Y+2, r25	; 0x02
 42a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 42c:	9c 83       	std	Y+4, r25	; 0x04
 42e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 430:	2f e7       	ldi	r18, 0x7F	; 127
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	3e 83       	std	Y+6, r19	; 0x06
 436:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x40;
 438:	98 87       	std	Y+8, r25	; 0x08
 43a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x40;
 43c:	9a 87       	std	Y+10, r25	; 0x0a
 43e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 440:	45 e0       	ldi	r20, 0x05	; 5
 442:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x40;
			frames[1] = 0x40;
			frames[2] = 0x7F;
			frames[3] = 0x40;
			frames[4] = 0x40;
			break;
 444:	5b c1       	rjmp	.+694    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'U':
			//7E 01 01 01 7E
			frames[0] = 0x7E;
 446:	2e e7       	ldi	r18, 0x7E	; 126
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	3a 83       	std	Y+2, r19	; 0x02
 44c:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x01;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 456:	9e 83       	std	Y+6, r25	; 0x06
 458:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 45a:	98 87       	std	Y+8, r25	; 0x08
 45c:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 45e:	3a 87       	std	Y+10, r19	; 0x0a
 460:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 462:	45 e0       	ldi	r20, 0x05	; 5
 464:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7E;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 466:	4a c1       	rjmp	.+660    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'V':
			//7C 02 01 02 7C
			frames[0] = 0x7C;
 468:	8c e7       	ldi	r24, 0x7C	; 124
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 470:	22 e0       	ldi	r18, 0x02	; 2
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	3c 83       	std	Y+4, r19	; 0x04
 476:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x01;
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	5e 83       	std	Y+6, r21	; 0x06
 47e:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 480:	38 87       	std	Y+8, r19	; 0x08
 482:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7C;
 484:	9a 87       	std	Y+10, r25	; 0x0a
 486:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 488:	45 e0       	ldi	r20, 0x05	; 5
 48a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7C;
			frames[1] = 0x02;
			frames[2] = 0x01;
			frames[3] = 0x02;
			frames[4] = 0x7C;
			break;
 48c:	37 c1       	rjmp	.+622    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'W':
			//7F 02 0C 02 7F
			frames[0] = 0x7F;
 48e:	8f e7       	ldi	r24, 0x7F	; 127
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 496:	22 e0       	ldi	r18, 0x02	; 2
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	3c 83       	std	Y+4, r19	; 0x04
 49c:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x0C;
 49e:	4c e0       	ldi	r20, 0x0C	; 12
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	5e 83       	std	Y+6, r21	; 0x06
 4a4:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 4a6:	38 87       	std	Y+8, r19	; 0x08
 4a8:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 4aa:	9a 87       	std	Y+10, r25	; 0x0a
 4ac:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4ae:	45 e0       	ldi	r20, 0x05	; 5
 4b0:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x02;
			frames[2] = 0x0C;
			frames[3] = 0x02;
			frames[4] = 0x7F;
			break;
 4b2:	24 c1       	rjmp	.+584    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'X':
			//63 14 08 14 63
			frames[0] = 0x63;
 4b4:	83 e6       	ldi	r24, 0x63	; 99
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9a 83       	std	Y+2, r25	; 0x02
 4ba:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x14;
 4bc:	24 e1       	ldi	r18, 0x14	; 20
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	3c 83       	std	Y+4, r19	; 0x04
 4c2:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 4c4:	48 e0       	ldi	r20, 0x08	; 8
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	5e 83       	std	Y+6, r21	; 0x06
 4ca:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x14;
 4cc:	38 87       	std	Y+8, r19	; 0x08
 4ce:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x63;
 4d0:	9a 87       	std	Y+10, r25	; 0x0a
 4d2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4d4:	45 e0       	ldi	r20, 0x05	; 5
 4d6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x63;
			frames[1] = 0x14;
			frames[2] = 0x08;
			frames[3] = 0x14;
			frames[4] = 0x63;
			break;
 4d8:	11 c1       	rjmp	.+546    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'Y':
			//60 18 07 18 60
			frames[0] = 0x60;
 4da:	80 e6       	ldi	r24, 0x60	; 96
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	9a 83       	std	Y+2, r25	; 0x02
 4e0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x18;
 4e2:	28 e1       	ldi	r18, 0x18	; 24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	3c 83       	std	Y+4, r19	; 0x04
 4e8:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x07;
 4ea:	47 e0       	ldi	r20, 0x07	; 7
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	5e 83       	std	Y+6, r21	; 0x06
 4f0:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x18;
 4f2:	38 87       	std	Y+8, r19	; 0x08
 4f4:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x60;
 4f6:	9a 87       	std	Y+10, r25	; 0x0a
 4f8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4fa:	45 e0       	ldi	r20, 0x05	; 5
 4fc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x60;
			frames[1] = 0x18;
			frames[2] = 0x07;
			frames[3] = 0x18;
			frames[4] = 0x60;
			break;
 4fe:	fe c0       	rjmp	.+508    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case 'Z':
			//43 45 49 51 61
			frames[0] = 0x43;
 500:	83 e4       	ldi	r24, 0x43	; 67
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	9a 83       	std	Y+2, r25	; 0x02
 506:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x45;
 508:	85 e4       	ldi	r24, 0x45	; 69
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9c 83       	std	Y+4, r25	; 0x04
 50e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 510:	89 e4       	ldi	r24, 0x49	; 73
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	9e 83       	std	Y+6, r25	; 0x06
 516:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x51;
 518:	81 e5       	ldi	r24, 0x51	; 81
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	98 87       	std	Y+8, r25	; 0x08
 51e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x61;
 520:	81 e6       	ldi	r24, 0x61	; 97
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	9a 87       	std	Y+10, r25	; 0x0a
 526:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 528:	45 e0       	ldi	r20, 0x05	; 5
 52a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x43;
			frames[1] = 0x45;
			frames[2] = 0x49;
			frames[3] = 0x51;
			frames[4] = 0x61;
			break;
 52c:	e7 c0       	rjmp	.+462    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
			frames[4] = 0x00;
			break;
		case '.':
			//00 01 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x01;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9c 83       	std	Y+4, r25	; 0x04
 534:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 536:	43 e0       	ldi	r20, 0x03	; 3
 538:	50 e0       	ldi	r21, 0x00	; 0
			break;
 53a:	e0 c0       	rjmp	.+448    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '?':
			//30 40 45 48 30
			frames[0] = 0x30;
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 544:	20 e4       	ldi	r18, 0x40	; 64
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	3c 83       	std	Y+4, r19	; 0x04
 54a:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 54c:	25 e4       	ldi	r18, 0x45	; 69
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	3e 83       	std	Y+6, r19	; 0x06
 552:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x48;
 554:	28 e4       	ldi	r18, 0x48	; 72
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	38 87       	std	Y+8, r19	; 0x08
 55a:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x30;
 55c:	9a 87       	std	Y+10, r25	; 0x0a
 55e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 560:	45 e0       	ldi	r20, 0x05	; 5
 562:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x40;
			frames[2] = 0x45;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 564:	cb c0       	rjmp	.+406    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '!':
			//00 7D 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x7D;
 566:	8d e7       	ldi	r24, 0x7D	; 125
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	9c 83       	std	Y+4, r25	; 0x04
 56c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 56e:	43 e0       	ldi	r20, 0x03	; 3
 570:	50 e0       	ldi	r21, 0x00	; 0
			break;
 572:	c4 c0       	rjmp	.+392    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '0':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 574:	2e e3       	ldi	r18, 0x3E	; 62
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	3a 83       	std	Y+2, r19	; 0x02
 57a:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 57c:	81 e4       	ldi	r24, 0x41	; 65
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	9c 83       	std	Y+4, r25	; 0x04
 582:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 584:	9e 83       	std	Y+6, r25	; 0x06
 586:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 588:	98 87       	std	Y+8, r25	; 0x08
 58a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 58c:	3a 87       	std	Y+10, r19	; 0x0a
 58e:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 590:	45 e0       	ldi	r20, 0x05	; 5
 592:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 594:	b3 c0       	rjmp	.+358    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '1':
			//11 21 7F 01 01
			frames[0] = 0x11;
 596:	81 e1       	ldi	r24, 0x11	; 17
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9a 83       	std	Y+2, r25	; 0x02
 59c:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x21;
 59e:	81 e2       	ldi	r24, 0x21	; 33
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	9c 83       	std	Y+4, r25	; 0x04
 5a4:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 5a6:	8f e7       	ldi	r24, 0x7F	; 127
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	9e 83       	std	Y+6, r25	; 0x06
 5ac:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	98 87       	std	Y+8, r25	; 0x08
 5b4:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 5b6:	9a 87       	std	Y+10, r25	; 0x0a
 5b8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5ba:	45 e0       	ldi	r20, 0x05	; 5
 5bc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x11;
			frames[1] = 0x21;
			frames[2] = 0x7F;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 5be:	9e c0       	rjmp	.+316    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '2':
			//31 43 45 49 31
			frames[0] = 0x31;
 5c0:	81 e3       	ldi	r24, 0x31	; 49
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	9a 83       	std	Y+2, r25	; 0x02
 5c6:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x43;
 5c8:	23 e4       	ldi	r18, 0x43	; 67
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	3c 83       	std	Y+4, r19	; 0x04
 5ce:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 5d0:	25 e4       	ldi	r18, 0x45	; 69
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	3e 83       	std	Y+6, r19	; 0x06
 5d6:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x49;
 5d8:	29 e4       	ldi	r18, 0x49	; 73
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	38 87       	std	Y+8, r19	; 0x08
 5de:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x31;
 5e0:	9a 87       	std	Y+10, r25	; 0x0a
 5e2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5e4:	45 e0       	ldi	r20, 0x05	; 5
 5e6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x43;
			frames[2] = 0x45;
			frames[3] = 0x49;
			frames[4] = 0x31;
			break;
 5e8:	89 c0       	rjmp	.+274    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '3':
			//22 49 49 49 36
			frames[0] = 0x22;
 5ea:	82 e2       	ldi	r24, 0x22	; 34
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	9a 83       	std	Y+2, r25	; 0x02
 5f0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 5f2:	89 e4       	ldi	r24, 0x49	; 73
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	9c 83       	std	Y+4, r25	; 0x04
 5f8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 5fa:	9e 83       	std	Y+6, r25	; 0x06
 5fc:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 5fe:	98 87       	std	Y+8, r25	; 0x08
 600:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 602:	86 e3       	ldi	r24, 0x36	; 54
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	9a 87       	std	Y+10, r25	; 0x0a
 608:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 60a:	45 e0       	ldi	r20, 0x05	; 5
 60c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x22;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 60e:	76 c0       	rjmp	.+236    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '4':
			//78 08 08 08 7F
			frames[0] = 0x78;
 610:	88 e7       	ldi	r24, 0x78	; 120
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9a 83       	std	Y+2, r25	; 0x02
 616:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x08;
 618:	88 e0       	ldi	r24, 0x08	; 8
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	9c 83       	std	Y+4, r25	; 0x04
 61e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 620:	9e 83       	std	Y+6, r25	; 0x06
 622:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 624:	98 87       	std	Y+8, r25	; 0x08
 626:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 628:	8f e7       	ldi	r24, 0x7F	; 127
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	9a 87       	std	Y+10, r25	; 0x0a
 62e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 630:	45 e0       	ldi	r20, 0x05	; 5
 632:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x78;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 634:	63 c0       	rjmp	.+198    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '5':
			//79 49 49 49 46
			frames[0] = 0x79;
 636:	89 e7       	ldi	r24, 0x79	; 121
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9a 83       	std	Y+2, r25	; 0x02
 63c:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 63e:	89 e4       	ldi	r24, 0x49	; 73
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	9c 83       	std	Y+4, r25	; 0x04
 644:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 646:	9e 83       	std	Y+6, r25	; 0x06
 648:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 64a:	98 87       	std	Y+8, r25	; 0x08
 64c:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 64e:	86 e4       	ldi	r24, 0x46	; 70
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	9a 87       	std	Y+10, r25	; 0x0a
 654:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 656:	45 e0       	ldi	r20, 0x05	; 5
 658:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x79;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 65a:	50 c0       	rjmp	.+160    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '6':
			//3E 49 49 49 26
			frames[0] = 0x3E;
 65c:	8e e3       	ldi	r24, 0x3E	; 62
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9a 83       	std	Y+2, r25	; 0x02
 662:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 664:	89 e4       	ldi	r24, 0x49	; 73
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	9c 83       	std	Y+4, r25	; 0x04
 66a:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 66c:	9e 83       	std	Y+6, r25	; 0x06
 66e:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 670:	98 87       	std	Y+8, r25	; 0x08
 672:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x26;
 674:	86 e2       	ldi	r24, 0x26	; 38
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	9a 87       	std	Y+10, r25	; 0x0a
 67a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 67c:	45 e0       	ldi	r20, 0x05	; 5
 67e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x26;
			break;
 680:	3d c0       	rjmp	.+122    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '7':
			//41 42 44 48 70
			frames[0] = 0x41;
 682:	81 e4       	ldi	r24, 0x41	; 65
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	9a 83       	std	Y+2, r25	; 0x02
 688:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x42;
 68a:	82 e4       	ldi	r24, 0x42	; 66
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9c 83       	std	Y+4, r25	; 0x04
 690:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x44;
 692:	84 e4       	ldi	r24, 0x44	; 68
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	9e 83       	std	Y+6, r25	; 0x06
 698:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 69a:	88 e4       	ldi	r24, 0x48	; 72
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	98 87       	std	Y+8, r25	; 0x08
 6a0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x70;
 6a2:	80 e7       	ldi	r24, 0x70	; 112
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	9a 87       	std	Y+10, r25	; 0x0a
 6a8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6aa:	45 e0       	ldi	r20, 0x05	; 5
 6ac:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x42;
			frames[2] = 0x44;
			frames[3] = 0x48;
			frames[4] = 0x70;
			break;
 6ae:	26 c0       	rjmp	.+76     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '8':
			//36 49 49 49 36
			frames[0] = 0x36;
 6b0:	26 e3       	ldi	r18, 0x36	; 54
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	3a 83       	std	Y+2, r19	; 0x02
 6b6:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x49;
 6b8:	89 e4       	ldi	r24, 0x49	; 73
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	9c 83       	std	Y+4, r25	; 0x04
 6be:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 6c0:	9e 83       	std	Y+6, r25	; 0x06
 6c2:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 6c4:	98 87       	std	Y+8, r25	; 0x08
 6c6:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 6c8:	3a 87       	std	Y+10, r19	; 0x0a
 6ca:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6cc:	45 e0       	ldi	r20, 0x05	; 5
 6ce:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x36;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 6d0:	15 c0       	rjmp	.+42     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
		case '9':
			//30 48 48 48 3F
			frames[0] = 0x30;
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	9a 83       	std	Y+2, r25	; 0x02
 6d8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 6da:	88 e4       	ldi	r24, 0x48	; 72
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	9c 83       	std	Y+4, r25	; 0x04
 6e0:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 6e2:	9e 83       	std	Y+6, r25	; 0x06
 6e4:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 6e6:	98 87       	std	Y+8, r25	; 0x08
 6e8:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 6ea:	8f e3       	ldi	r24, 0x3F	; 63
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	9a 87       	std	Y+10, r25	; 0x0a
 6f0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6f2:	45 e0       	ldi	r20, 0x05	; 5
 6f4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x3F;
			break;
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6f8:	45 e0       	ldi	r20, 0x05	; 5
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	fe 01       	movw	r30, r28
 6fe:	31 96       	adiw	r30, 0x01	; 1
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
	}


	//Go through each of the frames
	for(int i = 0; i < numFrames; i++) {
		currentFrameValue = frames[i];
 704:	81 91       	ld	r24, Z+
 706:	91 91       	ld	r25, Z+
		//No shift is needed for the PORTB
		PORTB = currentFrameValue;
 708:	85 b9       	out	0x05, r24	; 5
		//Shift the binary value to the right by 6 for PORTC
		PORTC = currentFrameValue >> 6;
 70a:	00 24       	eor	r0, r0
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	00 1c       	adc	r0, r0
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	00 1c       	adc	r0, r0
 718:	89 2f       	mov	r24, r25
 71a:	90 2d       	mov	r25, r0
 71c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	8f e3       	ldi	r24, 0x3F	; 63
 720:	9c e9       	ldi	r25, 0x9C	; 156
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 726:	00 c0       	rjmp	.+0      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 728:	00 00       	nop
			break;
	}


	//Go through each of the frames
	for(int i = 0; i < numFrames; i++) {
 72a:	2f 5f       	subi	r18, 0xFF	; 255
 72c:	3f 4f       	sbci	r19, 0xFF	; 255
 72e:	24 17       	cp	r18, r20
 730:	35 07       	cpc	r19, r21
 732:	40 f3       	brcs	.-48     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
		PORTC = currentFrameValue >> 6;
		delay();
	}

	// Add an empty frame to separate letters from each other
	PORTB = 0x00;
 734:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 736:	18 b8       	out	0x08, r1	; 8
 738:	af e3       	ldi	r26, 0x3F	; 63
 73a:	bc e9       	ldi	r27, 0x9C	; 156
 73c:	11 97       	sbiw	r26, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 740:	00 c0       	rjmp	.+0      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 742:	00 00       	nop
	delay();

}
 744:	2a 96       	adiw	r28, 0x0a	; 10
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

00000756 <USART_init>:
	return;
}

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 756:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 75a:	87 e6       	ldi	r24, 0x67	; 103
 75c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 760:	88 e1       	ldi	r24, 0x18	; 24
 762:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 766:	86 e0       	ldi	r24, 0x06	; 6
 768:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 76c:	08 95       	ret

0000076e <USART_receive>:
}

unsigned char USART_receive(void){
	if((UCSR0A & (1<<RXC0))){
 76e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 772:	88 23       	and	r24, r24
 774:	1c f4       	brge	.+6      	; 0x77c <USART_receive+0xe>
		return UDR0;
 776:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 77a:	08 95       	ret
	}
	return '\0';
 77c:	80 e0       	ldi	r24, 0x00	; 0
}
 77e:	08 95       	ret

00000780 <USART_send>:

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 780:	e0 ec       	ldi	r30, 0xC0	; 192
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	90 81       	ld	r25, Z
 786:	95 ff       	sbrs	r25, 5
 788:	fd cf       	rjmp	.-6      	; 0x784 <USART_send+0x4>
	UDR0 = data;
 78a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 78e:	08 95       	ret

00000790 <get_input>:
	PORTC = 0x00;
	delay();

}

void get_input(char * text, int length){
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
	for(int i = 0; i < length; i++){
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	e4 f4       	brge	.+56     	; 0x7da <get_input+0x4a>
 7a2:	7b 01       	movw	r14, r22
 7a4:	08 2f       	mov	r16, r24
 7a6:	19 2f       	mov	r17, r25
 7a8:	c0 e0       	ldi	r28, 0x00	; 0
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
		ASCII = '\0';
 7ac:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		while(ASCII == '\0' || ASCII == '`'){
			ASCII = USART_receive();
 7b0:	de df       	rcall	.-68     	; 0x76e <USART_receive>
 7b2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
		ASCII = '\0';
		while(ASCII == '\0' || ASCII == '`'){
 7b6:	88 23       	and	r24, r24
 7b8:	d9 f3       	breq	.-10     	; 0x7b0 <get_input+0x20>
 7ba:	80 36       	cpi	r24, 0x60	; 96
 7bc:	c9 f3       	breq	.-14     	; 0x7b0 <get_input+0x20>
			ASCII = USART_receive();
		}
		text[i] = ASCII;
 7be:	f8 01       	movw	r30, r16
 7c0:	81 93       	st	Z+, r24
 7c2:	8f 01       	movw	r16, r30
		USART_send(ASCII);
 7c4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 7c8:	db df       	rcall	.-74     	; 0x780 <USART_send>
		eeprom_write_byte((uint8_t *)i, ASCII);
 7ca:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 7ce:	ce 01       	movw	r24, r28
 7d0:	73 d0       	rcall	.+230    	; 0x8b8 <eeprom_write_byte>
	delay();

}

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
 7d2:	21 96       	adiw	r28, 0x01	; 1
 7d4:	ec 16       	cp	r14, r28
 7d6:	fd 06       	cpc	r15, r29
 7d8:	49 f7       	brne	.-46     	; 0x7ac <get_input+0x1c>
		text[i] = ASCII;
		USART_send(ASCII);
		eeprom_write_byte((uint8_t *)i, ASCII);
	}
	return;
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	1f 91       	pop	r17
 7e0:	0f 91       	pop	r16
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	08 95       	ret

000007e8 <USART_putstring>:
void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 7ee:	88 81       	ld	r24, Y
 7f0:	88 23       	and	r24, r24
 7f2:	29 f0       	breq	.+10     	; 0x7fe <USART_putstring+0x16>
 7f4:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 7f6:	c4 df       	rcall	.-120    	; 0x780 <USART_send>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
 7f8:	89 91       	ld	r24, Y+
 7fa:	81 11       	cpse	r24, r1
 7fc:	fc cf       	rjmp	.-8      	; 0x7f6 <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <main>:

// Constants
const double DELAY_MS = 10.00; // Adjust this variable to adjust the delay between each frame

int main (void)
{
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	00 d0       	rcall	.+0      	; 0x80a <main+0x6>
 80a:	00 d0       	rcall	.+0      	; 0x80c <main+0x8>
 80c:	1f 92       	push	r1
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
	int TEXT_LENGTH = 5;
	char TEXT[TEXT_LENGTH];
	//Set all pins on PORT B and C to output
	DDRB = 0b00111111;
 812:	8f e3       	ldi	r24, 0x3F	; 63
 814:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000001;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	87 b9       	out	0x07, r24	; 7

	eeprom_read_block((void *)&TEXT, (const void *)0, TEXT_LENGTH); //reads the eeprom on load
 81a:	45 e0       	ldi	r20, 0x05	; 5
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	38 d0       	rcall	.+112    	; 0x898 <eeprom_read_block>

	//Initialize the board
	board_init();
 828:	81 dc       	rcall	.-1790   	; 0x12c <board_init>
	//Initialize the USART
	USART_init();
 82a:	95 df       	rcall	.-214    	; 0x756 <USART_init>
 82c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	ASCII = '\0';
 830:	7e 01       	movw	r14, r28
 832:	86 e0       	ldi	r24, 0x06	; 6
 834:	e8 0e       	add	r14, r24
 836:	f1 1c       	adc	r15, r1
	while(1) {
 		ASCII = USART_receive();
 838:	9a df       	rcall	.-204    	; 0x76e <USART_receive>
 83a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 83e:	80 36       	cpi	r24, 0x60	; 96
 		if(ASCII == '`'){
 840:	09 f5       	brne	.+66     	; 0x884 <main+0x80>
 			USART_putstring("Type 5 characters\n");
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	d0 df       	rcall	.-96     	; 0x7e8 <USART_putstring>
 			get_input(TEXT, TEXT_LENGTH);
 848:	65 e0       	ldi	r22, 0x05	; 5
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	9f df       	rcall	.-194    	; 0x790 <get_input>
			USART_putstring("\n\rWord set to ");
 852:	83 e1       	ldi	r24, 0x13	; 19
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	c8 df       	rcall	.-112    	; 0x7e8 <USART_putstring>
 858:	8e 01       	movw	r16, r28
 85a:	0f 5f       	subi	r16, 0xFF	; 255
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
 85e:	f8 01       	movw	r30, r16
 860:	81 91       	ld	r24, Z+
 862:	8f 01       	movw	r16, r30
 864:	8d df       	rcall	.-230    	; 0x780 <USART_send>
 		ASCII = USART_receive();
 		if(ASCII == '`'){
 			USART_putstring("Type 5 characters\n");
 			get_input(TEXT, TEXT_LENGTH);
			USART_putstring("\n\rWord set to ");
			for(int i = 0; i < TEXT_LENGTH; i++){
 866:	0e 15       	cp	r16, r14
 868:	1f 05       	cpc	r17, r15
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 86a:	c9 f7       	brne	.-14     	; 0x85e <main+0x5a>
 86c:	82 e2       	ldi	r24, 0x22	; 34
 86e:	91 e0       	ldi	r25, 0x01	; 1
 870:	bb df       	rcall	.-138    	; 0x7e8 <USART_putstring>
 872:	08 c0       	rjmp	.+16     	; 0x884 <main+0x80>
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
			displayCharacter(TEXT[i]);
 874:	f8 01       	movw	r30, r16
 876:	81 91       	ld	r24, Z+
 878:	8f 01       	movw	r16, r30
 87a:	61 dc       	rcall	.-1854   	; 0x13e <displayCharacter>
 87c:	0e 15       	cp	r16, r14
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
 87e:	1f 05       	cpc	r17, r15
 880:	c9 f7       	brne	.-14     	; 0x874 <main+0x70>
 882:	da cf       	rjmp	.-76     	; 0x838 <main+0x34>
 884:	8e 01       	movw	r16, r28
 886:	0f 5f       	subi	r16, 0xFF	; 255
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	f4 cf       	rjmp	.-24     	; 0x874 <main+0x70>

0000088c <__tablejump2__>:
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	05 90       	lpm	r0, Z+
 892:	f4 91       	lpm	r31, Z
 894:	e0 2d       	mov	r30, r0
 896:	09 94       	ijmp

00000898 <eeprom_read_block>:
 898:	dc 01       	movw	r26, r24
 89a:	cb 01       	movw	r24, r22

0000089c <eeprom_read_blraw>:
 89c:	fc 01       	movw	r30, r24
 89e:	f9 99       	sbic	0x1f, 1	; 31
 8a0:	fe cf       	rjmp	.-4      	; 0x89e <eeprom_read_blraw+0x2>
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <eeprom_read_blraw+0x14>
 8a4:	f2 bd       	out	0x22, r31	; 34
 8a6:	e1 bd       	out	0x21, r30	; 33
 8a8:	f8 9a       	sbi	0x1f, 0	; 31
 8aa:	31 96       	adiw	r30, 0x01	; 1
 8ac:	00 b4       	in	r0, 0x20	; 32
 8ae:	0d 92       	st	X+, r0
 8b0:	41 50       	subi	r20, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	b8 f7       	brcc	.-18     	; 0x8a4 <eeprom_read_blraw+0x8>
 8b6:	08 95       	ret

000008b8 <eeprom_write_byte>:
 8b8:	26 2f       	mov	r18, r22

000008ba <eeprom_write_r18>:
 8ba:	f9 99       	sbic	0x1f, 1	; 31
 8bc:	fe cf       	rjmp	.-4      	; 0x8ba <eeprom_write_r18>
 8be:	1f ba       	out	0x1f, r1	; 31
 8c0:	92 bd       	out	0x22, r25	; 34
 8c2:	81 bd       	out	0x21, r24	; 33
 8c4:	20 bd       	out	0x20, r18	; 32
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	fa 9a       	sbi	0x1f, 2	; 31
 8cc:	f9 9a       	sbi	0x1f, 1	; 31
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	08 95       	ret

000008d4 <_exit>:
 8d4:	f8 94       	cli

000008d6 <__stop_program>:
 8d6:	ff cf       	rjmp	.-2      	; 0x8d6 <__stop_program>
