
Hyperion_Spinning_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000008c0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800126  00800126  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000009f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f33  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150a  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010ae0  00000000  00000000  00003990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  00014470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000148ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000a5f  00000000  00000000  00014946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6d c0       	rjmp	.+218    	; 0xdc <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	a7 02       	muls	r26, r23
  6a:	70 03       	mulsu	r23, r16
  6c:	70 03       	mulsu	r23, r16
  6e:	70 03       	mulsu	r23, r16
  70:	70 03       	mulsu	r23, r16
  72:	70 03       	mulsu	r23, r16
  74:	70 03       	mulsu	r23, r16
  76:	70 03       	mulsu	r23, r16
  78:	70 03       	mulsu	r23, r16
  7a:	70 03       	mulsu	r23, r16
  7c:	70 03       	mulsu	r23, r16
  7e:	70 03       	mulsu	r23, r16
  80:	70 03       	mulsu	r23, r16
  82:	8b 02       	muls	r24, r27
  84:	70 03       	mulsu	r23, r16
  86:	ae 02       	muls	r26, r30
  88:	bf 02       	muls	r27, r31
  8a:	d4 02       	muls	r29, r20
  8c:	e9 02       	muls	r30, r25
  8e:	fc 02       	muls	r31, r28
  90:	0f 03       	fmul	r16, r23
  92:	22 03       	mulsu	r18, r18
  94:	35 03       	mulsu	r19, r21
  96:	4c 03       	fmul	r20, r20
  98:	5d 03       	fmul	r21, r21
  9a:	70 03       	mulsu	r23, r16
  9c:	70 03       	mulsu	r23, r16
  9e:	70 03       	mulsu	r23, r16
  a0:	70 03       	mulsu	r23, r16
  a2:	70 03       	mulsu	r23, r16
  a4:	92 02       	muls	r25, r18
  a6:	70 03       	mulsu	r23, r16
  a8:	b4 00       	.word	0x00b4	; ????
  aa:	c7 00       	.word	0x00c7	; ????
  ac:	da 00       	.word	0x00da	; ????
  ae:	ed 00       	.word	0x00ed	; ????
  b0:	00 01       	movw	r0, r0
  b2:	11 01       	movw	r2, r2
  b4:	22 01       	movw	r4, r4
  b6:	37 01       	movw	r6, r14
  b8:	48 01       	movw	r8, r16
  ba:	59 01       	movw	r10, r18
  bc:	6c 01       	movw	r12, r24
  be:	6c 01       	movw	r12, r24
  c0:	7d 01       	movw	r14, r26
  c2:	90 01       	movw	r18, r0
  c4:	a5 01       	movw	r20, r10
  c6:	b6 01       	movw	r22, r12
  c8:	c9 01       	movw	r24, r18
  ca:	e0 01       	movw	r28, r0
  cc:	f3 01       	movw	r30, r6
  ce:	06 02       	muls	r16, r22
  d0:	17 02       	muls	r17, r23
  d2:	28 02       	muls	r18, r24
  d4:	3b 02       	muls	r19, r27
  d6:	4e 02       	muls	r20, r30
  d8:	61 02       	muls	r22, r17
  da:	74 02       	muls	r23, r20

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
  e8:	11 e0       	ldi	r17, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f8 e0       	ldi	r31, 0x08	; 8
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a6 32       	cpi	r26, 0x26	; 38
  fa:	b1 07       	cpc	r27, r17
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	a6 e2       	ldi	r26, 0x26	; 38
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
 106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
 108:	a7 32       	cpi	r26, 0x27	; 39
 10a:	b2 07       	cpc	r27, r18
 10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
 10e:	6e d3       	rcall	.+1756   	; 0x7ec <main>
 110:	d5 c3       	rjmp	.+1962   	; 0x8bc <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 114:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 116:	84 b1       	in	r24, 0x04	; 4
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 11e:	89 2f       	mov	r24, r25
 120:	80 6a       	ori	r24, 0xA0	; 160
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <displayCharacter>:
}

// Displays the character with the LED
// For each "frame", change the LEDs to the new pattern
// Each frame is given in hex
void displayCharacter (char character) {
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2a 97       	sbiw	r28, 0x0a	; 10
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	e8 2f       	mov	r30, r24
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
	unsigned int currentFrameValue = 0;
	unsigned int frames[5] = {0x00,0x00,0x00,0x00,0x00}; 
 13c:	9e 01       	movw	r18, r28
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	d9 01       	movw	r26, r18
 146:	1d 92       	st	X+, r1
 148:	8a 95       	dec	r24
 14a:	e9 f7       	brne	.-6      	; 0x146 <displayCharacter+0x20>

	switch (character)
 14c:	8e 2f       	mov	r24, r30
 14e:	ee 0f       	add	r30, r30
 150:	99 0b       	sbc	r25, r25
 152:	aa 0b       	sbc	r26, r26
 154:	bb 0b       	sbc	r27, r27
 156:	fc 01       	movw	r30, r24
 158:	b1 97       	sbiw	r30, 0x21	; 33
 15a:	ea 33       	cpi	r30, 0x3A	; 58
 15c:	f1 05       	cpc	r31, r1
 15e:	08 f0       	brcs	.+2      	; 0x162 <displayCharacter+0x3c>
 160:	bf c2       	rjmp	.+1406   	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 162:	ec 5c       	subi	r30, 0xCC	; 204
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	86 c3       	rjmp	.+1804   	; 0x874 <__tablejump2__>
	{
		case 'A':
			//1F 24 44 24 1F
			frames[0] = 0x1F;
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x24;
 170:	24 e2       	ldi	r18, 0x24	; 36
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	3c 83       	std	Y+4, r19	; 0x04
 176:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x44;
 178:	44 e4       	ldi	r20, 0x44	; 68
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	5e 83       	std	Y+6, r21	; 0x06
 17e:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x24;
 180:	38 87       	std	Y+8, r19	; 0x08
 182:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x1F;
 184:	9a 87       	std	Y+10, r25	; 0x0a
 186:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 188:	45 e0       	ldi	r20, 0x05	; 5
 18a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x1F;
			frames[1] = 0x24;
			frames[2] = 0x44;
			frames[3] = 0x24;
			frames[4] = 0x1F;
			break;
 18c:	ab c2       	rjmp	.+1366   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'B':
			//7F 49 49 49 36
			frames[0] = 0x7F;
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 196:	89 e4       	ldi	r24, 0x49	; 73
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9c 83       	std	Y+4, r25	; 0x04
 19c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 1a2:	98 87       	std	Y+8, r25	; 0x08
 1a4:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 1a6:	86 e3       	ldi	r24, 0x36	; 54
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9a 87       	std	Y+10, r25	; 0x0a
 1ac:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1ae:	45 e0       	ldi	r20, 0x05	; 5
 1b0:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 1b2:	98 c2       	rjmp	.+1328   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'C':
			//3E 41 41 41 22
			frames[0] = 0x3E;
 1b4:	8e e3       	ldi	r24, 0x3E	; 62
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9c 83       	std	Y+4, r25	; 0x04
 1c2:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 1c4:	9e 83       	std	Y+6, r25	; 0x06
 1c6:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 1c8:	98 87       	std	Y+8, r25	; 0x08
 1ca:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x22;
 1cc:	82 e2       	ldi	r24, 0x22	; 34
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9a 87       	std	Y+10, r25	; 0x0a
 1d2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1d4:	45 e0       	ldi	r20, 0x05	; 5
 1d6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x22;
			break;
 1d8:	85 c2       	rjmp	.+1290   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'D':
			//7F 41 41 41 3E
			frames[0] = 0x7F;
 1da:	8f e7       	ldi	r24, 0x7F	; 127
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9a 83       	std	Y+2, r25	; 0x02
 1e0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 1e2:	81 e4       	ldi	r24, 0x41	; 65
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	9c 83       	std	Y+4, r25	; 0x04
 1e8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 1ea:	9e 83       	std	Y+6, r25	; 0x06
 1ec:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 1ee:	98 87       	std	Y+8, r25	; 0x08
 1f0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 1f2:	8e e3       	ldi	r24, 0x3E	; 62
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	9a 87       	std	Y+10, r25	; 0x0a
 1f8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 1fa:	45 e0       	ldi	r20, 0x05	; 5
 1fc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 1fe:	72 c2       	rjmp	.+1252   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'E':
			//7F 49 49 49 49
			frames[0] = 0x7F;
 200:	8f e7       	ldi	r24, 0x7F	; 127
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 208:	89 e4       	ldi	r24, 0x49	; 73
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9c 83       	std	Y+4, r25	; 0x04
 20e:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 210:	9e 83       	std	Y+6, r25	; 0x06
 212:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 214:	98 87       	std	Y+8, r25	; 0x08
 216:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x49;
 218:	9a 87       	std	Y+10, r25	; 0x0a
 21a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 21c:	45 e0       	ldi	r20, 0x05	; 5
 21e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x49;
			break;
 220:	61 c2       	rjmp	.+1218   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'F':
			//7F 48 48 48 48
			frames[0] = 0x7F;
 222:	8f e7       	ldi	r24, 0x7F	; 127
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 22a:	88 e4       	ldi	r24, 0x48	; 72
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	9c 83       	std	Y+4, r25	; 0x04
 230:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 232:	9e 83       	std	Y+6, r25	; 0x06
 234:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 236:	98 87       	std	Y+8, r25	; 0x08
 238:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x48;
 23a:	9a 87       	std	Y+10, r25	; 0x0a
 23c:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 23e:	45 e0       	ldi	r20, 0x05	; 5
 240:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x48;
			break;
 242:	50 c2       	rjmp	.+1184   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'G':
			//3E 41 49 49 2E
			frames[0] = 0x3E;
 244:	8e e3       	ldi	r24, 0x3E	; 62
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9c 83       	std	Y+4, r25	; 0x04
 252:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 254:	89 e4       	ldi	r24, 0x49	; 73
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9e 83       	std	Y+6, r25	; 0x06
 25a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 25c:	98 87       	std	Y+8, r25	; 0x08
 25e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x2E;
 260:	8e e2       	ldi	r24, 0x2E	; 46
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9a 87       	std	Y+10, r25	; 0x0a
 266:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 268:	45 e0       	ldi	r20, 0x05	; 5
 26a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x2E;
			break;
 26c:	3b c2       	rjmp	.+1142   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'H':
			//7F 08 08 08 7F
			frames[0] = 0x7F;
 26e:	2f e7       	ldi	r18, 0x7F	; 127
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	3a 83       	std	Y+2, r19	; 0x02
 274:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x08;
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9c 83       	std	Y+4, r25	; 0x04
 27c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 27e:	9e 83       	std	Y+6, r25	; 0x06
 280:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 282:	98 87       	std	Y+8, r25	; 0x08
 284:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 286:	3a 87       	std	Y+10, r19	; 0x0a
 288:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 28a:	45 e0       	ldi	r20, 0x05	; 5
 28c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 28e:	2a c2       	rjmp	.+1108   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'I':
			//41 41 7F 41 41
			frames[0] = 0x41;
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 298:	9c 83       	std	Y+4, r25	; 0x04
 29a:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 29c:	2f e7       	ldi	r18, 0x7F	; 127
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	3e 83       	std	Y+6, r19	; 0x06
 2a2:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x41;
 2a4:	98 87       	std	Y+8, r25	; 0x08
 2a6:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x41;
 2a8:	9a 87       	std	Y+10, r25	; 0x0a
 2aa:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2ac:	45 e0       	ldi	r20, 0x05	; 5
 2ae:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x41;
			frames[2] = 0x7F;
			frames[3] = 0x41;
			frames[4] = 0x41;
			break;
 2b0:	19 c2       	rjmp	.+1074   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'J':
			//02 01 01 01 7E
			frames[0] = 0x02;
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9c 83       	std	Y+4, r25	; 0x04
 2c0:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 2c2:	9e 83       	std	Y+6, r25	; 0x06
 2c4:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 2c6:	98 87       	std	Y+8, r25	; 0x08
 2c8:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 2ca:	8e e7       	ldi	r24, 0x7E	; 126
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9a 87       	std	Y+10, r25	; 0x0a
 2d0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2d2:	45 e0       	ldi	r20, 0x05	; 5
 2d4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x02;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 2d6:	06 c2       	rjmp	.+1036   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			frames[2] = 0x14;
			frames[3] = 0x22;
			frames[4] = 0x41;
		case 'L':
			//7F 01 01 01 01
			frames[0] = 0x7F;
 2d8:	8f e7       	ldi	r24, 0x7F	; 127
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x01;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9c 83       	std	Y+4, r25	; 0x04
 2e6:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 2e8:	9e 83       	std	Y+6, r25	; 0x06
 2ea:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 2ec:	98 87       	std	Y+8, r25	; 0x08
 2ee:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 2f0:	9a 87       	std	Y+10, r25	; 0x0a
 2f2:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 2f4:	45 e0       	ldi	r20, 0x05	; 5
 2f6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 2f8:	f5 c1       	rjmp	.+1002   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'M':
			//7F 20 18 20 7F
			frames[0] = 0x7F;
 2fa:	8f e7       	ldi	r24, 0x7F	; 127
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	9a 83       	std	Y+2, r25	; 0x02
 300:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x20;
 302:	20 e2       	ldi	r18, 0x20	; 32
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	3c 83       	std	Y+4, r19	; 0x04
 308:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x18;
 30a:	48 e1       	ldi	r20, 0x18	; 24
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	5e 83       	std	Y+6, r21	; 0x06
 310:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x20;
 312:	38 87       	std	Y+8, r19	; 0x08
 314:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 316:	9a 87       	std	Y+10, r25	; 0x0a
 318:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 31a:	45 e0       	ldi	r20, 0x05	; 5
 31c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x20;
			frames[2] = 0x18;
			frames[3] = 0x20;
			frames[4] = 0x7F;
			break;
 31e:	e2 c1       	rjmp	.+964    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'N':
			//7F 10 08 04 7F
			frames[0] = 0x7F;
 320:	8f e7       	ldi	r24, 0x7F	; 127
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9a 83       	std	Y+2, r25	; 0x02
 326:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x10;
 328:	20 e1       	ldi	r18, 0x10	; 16
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	3c 83       	std	Y+4, r19	; 0x04
 32e:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 330:	28 e0       	ldi	r18, 0x08	; 8
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	3e 83       	std	Y+6, r19	; 0x06
 336:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x04;
 338:	24 e0       	ldi	r18, 0x04	; 4
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	38 87       	std	Y+8, r19	; 0x08
 33e:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 340:	9a 87       	std	Y+10, r25	; 0x0a
 342:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 344:	45 e0       	ldi	r20, 0x05	; 5
 346:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x10;
			frames[2] = 0x08;
			frames[3] = 0x04;
			frames[4] = 0x7F;
			break;
 348:	cd c1       	rjmp	.+922    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'O':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 34a:	2e e3       	ldi	r18, 0x3E	; 62
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	3a 83       	std	Y+2, r19	; 0x02
 350:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9c 83       	std	Y+4, r25	; 0x04
 358:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 35a:	9e 83       	std	Y+6, r25	; 0x06
 35c:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 35e:	98 87       	std	Y+8, r25	; 0x08
 360:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 362:	3a 87       	std	Y+10, r19	; 0x0a
 364:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 366:	45 e0       	ldi	r20, 0x05	; 5
 368:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 36a:	bc c1       	rjmp	.+888    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'P':
			//7F 48 48 48 30
			frames[0] = 0x7F;
 36c:	8f e7       	ldi	r24, 0x7F	; 127
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9a 83       	std	Y+2, r25	; 0x02
 372:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 374:	88 e4       	ldi	r24, 0x48	; 72
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9c 83       	std	Y+4, r25	; 0x04
 37a:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 37c:	9e 83       	std	Y+6, r25	; 0x06
 37e:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 380:	98 87       	std	Y+8, r25	; 0x08
 382:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x30;
 384:	80 e3       	ldi	r24, 0x30	; 48
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	9a 87       	std	Y+10, r25	; 0x0a
 38a:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 38c:	45 e0       	ldi	r20, 0x05	; 5
 38e:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 390:	a9 c1       	rjmp	.+850    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'Q':
			//3E 41 45 43 3F
			frames[0] = 0x3E;
 392:	8e e3       	ldi	r24, 0x3E	; 62
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	9a 83       	std	Y+2, r25	; 0x02
 398:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x41;
 39a:	81 e4       	ldi	r24, 0x41	; 65
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	9c 83       	std	Y+4, r25	; 0x04
 3a0:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x45;
 3a2:	85 e4       	ldi	r24, 0x45	; 69
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	9e 83       	std	Y+6, r25	; 0x06
 3a8:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x43;
 3aa:	83 e4       	ldi	r24, 0x43	; 67
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	98 87       	std	Y+8, r25	; 0x08
 3b0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 3b2:	8f e3       	ldi	r24, 0x3F	; 63
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	9a 87       	std	Y+10, r25	; 0x0a
 3b8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3ba:	45 e0       	ldi	r20, 0x05	; 5
 3bc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x45;
			frames[3] = 0x43;
			frames[4] = 0x3F;
			break;
 3be:	92 c1       	rjmp	.+804    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'R':
			//7F 48 48 48 37
			frames[0] = 0x7F;
 3c0:	8f e7       	ldi	r24, 0x7F	; 127
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9a 83       	std	Y+2, r25	; 0x02
 3c6:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 3c8:	88 e4       	ldi	r24, 0x48	; 72
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	9c 83       	std	Y+4, r25	; 0x04
 3ce:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 3d0:	9e 83       	std	Y+6, r25	; 0x06
 3d2:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 3d4:	98 87       	std	Y+8, r25	; 0x08
 3d6:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x37;
 3d8:	87 e3       	ldi	r24, 0x37	; 55
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9a 87       	std	Y+10, r25	; 0x0a
 3de:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 3e0:	45 e0       	ldi	r20, 0x05	; 5
 3e2:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x37;
			break;
 3e4:	7f c1       	rjmp	.+766    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'S':
			//31 49 49 49 46
			frames[0] = 0x31;
 3e6:	81 e3       	ldi	r24, 0x31	; 49
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9a 83       	std	Y+2, r25	; 0x02
 3ec:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 3ee:	89 e4       	ldi	r24, 0x49	; 73
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	9c 83       	std	Y+4, r25	; 0x04
 3f4:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 3f6:	9e 83       	std	Y+6, r25	; 0x06
 3f8:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 3fa:	98 87       	std	Y+8, r25	; 0x08
 3fc:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 3fe:	86 e4       	ldi	r24, 0x46	; 70
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9a 87       	std	Y+10, r25	; 0x0a
 404:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 406:	45 e0       	ldi	r20, 0x05	; 5
 408:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 40a:	6c c1       	rjmp	.+728    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'T':
			//40 40 7F 40 40
			frames[0] = 0x40;
 40c:	80 e4       	ldi	r24, 0x40	; 64
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	9a 83       	std	Y+2, r25	; 0x02
 412:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 414:	9c 83       	std	Y+4, r25	; 0x04
 416:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 418:	2f e7       	ldi	r18, 0x7F	; 127
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	3e 83       	std	Y+6, r19	; 0x06
 41e:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x40;
 420:	98 87       	std	Y+8, r25	; 0x08
 422:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x40;
 424:	9a 87       	std	Y+10, r25	; 0x0a
 426:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 428:	45 e0       	ldi	r20, 0x05	; 5
 42a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x40;
			frames[1] = 0x40;
			frames[2] = 0x7F;
			frames[3] = 0x40;
			frames[4] = 0x40;
			break;
 42c:	5b c1       	rjmp	.+694    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'U':
			//7E 01 01 01 7E
			frames[0] = 0x7E;
 42e:	2e e7       	ldi	r18, 0x7E	; 126
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	3a 83       	std	Y+2, r19	; 0x02
 434:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x01;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	9c 83       	std	Y+4, r25	; 0x04
 43c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x01;
 43e:	9e 83       	std	Y+6, r25	; 0x06
 440:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 442:	98 87       	std	Y+8, r25	; 0x08
 444:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7E;
 446:	3a 87       	std	Y+10, r19	; 0x0a
 448:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 44a:	45 e0       	ldi	r20, 0x05	; 5
 44c:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7E;
			frames[1] = 0x01;
			frames[2] = 0x01;
			frames[3] = 0x01;
			frames[4] = 0x7E;
			break;
 44e:	4a c1       	rjmp	.+660    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'V':
			//7C 02 01 02 7C
			frames[0] = 0x7C;
 450:	8c e7       	ldi	r24, 0x7C	; 124
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	9a 83       	std	Y+2, r25	; 0x02
 456:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 458:	22 e0       	ldi	r18, 0x02	; 2
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	3c 83       	std	Y+4, r19	; 0x04
 45e:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x01;
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	5e 83       	std	Y+6, r21	; 0x06
 466:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 468:	38 87       	std	Y+8, r19	; 0x08
 46a:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7C;
 46c:	9a 87       	std	Y+10, r25	; 0x0a
 46e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 470:	45 e0       	ldi	r20, 0x05	; 5
 472:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7C;
			frames[1] = 0x02;
			frames[2] = 0x01;
			frames[3] = 0x02;
			frames[4] = 0x7C;
			break;
 474:	37 c1       	rjmp	.+622    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'W':
			//7F 02 0C 02 7F
			frames[0] = 0x7F;
 476:	8f e7       	ldi	r24, 0x7F	; 127
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9a 83       	std	Y+2, r25	; 0x02
 47c:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x02;
 47e:	22 e0       	ldi	r18, 0x02	; 2
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	3c 83       	std	Y+4, r19	; 0x04
 484:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x0C;
 486:	4c e0       	ldi	r20, 0x0C	; 12
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	5e 83       	std	Y+6, r21	; 0x06
 48c:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x02;
 48e:	38 87       	std	Y+8, r19	; 0x08
 490:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x7F;
 492:	9a 87       	std	Y+10, r25	; 0x0a
 494:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 496:	45 e0       	ldi	r20, 0x05	; 5
 498:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x7F;
			frames[1] = 0x02;
			frames[2] = 0x0C;
			frames[3] = 0x02;
			frames[4] = 0x7F;
			break;
 49a:	24 c1       	rjmp	.+584    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'X':
			//63 14 08 14 63
			frames[0] = 0x63;
 49c:	83 e6       	ldi	r24, 0x63	; 99
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	9a 83       	std	Y+2, r25	; 0x02
 4a2:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x14;
 4a4:	24 e1       	ldi	r18, 0x14	; 20
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	3c 83       	std	Y+4, r19	; 0x04
 4aa:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x08;
 4ac:	48 e0       	ldi	r20, 0x08	; 8
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	5e 83       	std	Y+6, r21	; 0x06
 4b2:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x14;
 4b4:	38 87       	std	Y+8, r19	; 0x08
 4b6:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x63;
 4b8:	9a 87       	std	Y+10, r25	; 0x0a
 4ba:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4bc:	45 e0       	ldi	r20, 0x05	; 5
 4be:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x63;
			frames[1] = 0x14;
			frames[2] = 0x08;
			frames[3] = 0x14;
			frames[4] = 0x63;
			break;
 4c0:	11 c1       	rjmp	.+546    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'Y':
			//60 18 07 18 60
			frames[0] = 0x60;
 4c2:	80 e6       	ldi	r24, 0x60	; 96
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	9a 83       	std	Y+2, r25	; 0x02
 4c8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x18;
 4ca:	28 e1       	ldi	r18, 0x18	; 24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	3c 83       	std	Y+4, r19	; 0x04
 4d0:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x07;
 4d2:	47 e0       	ldi	r20, 0x07	; 7
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	5e 83       	std	Y+6, r21	; 0x06
 4d8:	4d 83       	std	Y+5, r20	; 0x05
			frames[3] = 0x18;
 4da:	38 87       	std	Y+8, r19	; 0x08
 4dc:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x60;
 4de:	9a 87       	std	Y+10, r25	; 0x0a
 4e0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 4e2:	45 e0       	ldi	r20, 0x05	; 5
 4e4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x60;
			frames[1] = 0x18;
			frames[2] = 0x07;
			frames[3] = 0x18;
			frames[4] = 0x60;
			break;
 4e6:	fe c0       	rjmp	.+508    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case 'Z':
			//43 45 49 51 61
			frames[0] = 0x43;
 4e8:	83 e4       	ldi	r24, 0x43	; 67
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	9a 83       	std	Y+2, r25	; 0x02
 4ee:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x45;
 4f0:	85 e4       	ldi	r24, 0x45	; 69
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9c 83       	std	Y+4, r25	; 0x04
 4f6:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 4f8:	89 e4       	ldi	r24, 0x49	; 73
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	9e 83       	std	Y+6, r25	; 0x06
 4fe:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x51;
 500:	81 e5       	ldi	r24, 0x51	; 81
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	98 87       	std	Y+8, r25	; 0x08
 506:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x61;
 508:	81 e6       	ldi	r24, 0x61	; 97
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9a 87       	std	Y+10, r25	; 0x0a
 50e:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 510:	45 e0       	ldi	r20, 0x05	; 5
 512:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x43;
			frames[1] = 0x45;
			frames[2] = 0x49;
			frames[3] = 0x51;
			frames[4] = 0x61;
			break;
 514:	e7 c0       	rjmp	.+462    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			frames[4] = 0x00;
			break;
		case '.':
			//00 01 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x01;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	9c 83       	std	Y+4, r25	; 0x04
 51c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 51e:	43 e0       	ldi	r20, 0x03	; 3
 520:	50 e0       	ldi	r21, 0x00	; 0
			break;
 522:	e0 c0       	rjmp	.+448    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '?':
			//30 40 45 48 30
			frames[0] = 0x30;
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	9a 83       	std	Y+2, r25	; 0x02
 52a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x40;
 52c:	20 e4       	ldi	r18, 0x40	; 64
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	3c 83       	std	Y+4, r19	; 0x04
 532:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 534:	25 e4       	ldi	r18, 0x45	; 69
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	3e 83       	std	Y+6, r19	; 0x06
 53a:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x48;
 53c:	28 e4       	ldi	r18, 0x48	; 72
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	38 87       	std	Y+8, r19	; 0x08
 542:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x30;
 544:	9a 87       	std	Y+10, r25	; 0x0a
 546:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 548:	45 e0       	ldi	r20, 0x05	; 5
 54a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x40;
			frames[2] = 0x45;
			frames[3] = 0x48;
			frames[4] = 0x30;
			break;
 54c:	cb c0       	rjmp	.+406    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '!':
			//00 7D 00 - Special Case (3 frames)
			frames[0] = 0x00;
			frames[1] = 0x7D;
 54e:	8d e7       	ldi	r24, 0x7D	; 125
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9c 83       	std	Y+4, r25	; 0x04
 554:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x00;
			numFrames = 3;
 556:	43 e0       	ldi	r20, 0x03	; 3
 558:	50 e0       	ldi	r21, 0x00	; 0
			break;
 55a:	c4 c0       	rjmp	.+392    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '0':
			//3E 41 41 41 3E
			frames[0] = 0x3E;
 55c:	2e e3       	ldi	r18, 0x3E	; 62
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	3a 83       	std	Y+2, r19	; 0x02
 562:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x41;
 564:	81 e4       	ldi	r24, 0x41	; 65
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9c 83       	std	Y+4, r25	; 0x04
 56a:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x41;
 56c:	9e 83       	std	Y+6, r25	; 0x06
 56e:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x41;
 570:	98 87       	std	Y+8, r25	; 0x08
 572:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3E;
 574:	3a 87       	std	Y+10, r19	; 0x0a
 576:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 578:	45 e0       	ldi	r20, 0x05	; 5
 57a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x41;
			frames[2] = 0x41;
			frames[3] = 0x41;
			frames[4] = 0x3E;
			break;
 57c:	b3 c0       	rjmp	.+358    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '1':
			//11 21 7F 01 01
			frames[0] = 0x11;
 57e:	81 e1       	ldi	r24, 0x11	; 17
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	9a 83       	std	Y+2, r25	; 0x02
 584:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x21;
 586:	81 e2       	ldi	r24, 0x21	; 33
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	9c 83       	std	Y+4, r25	; 0x04
 58c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x7F;
 58e:	8f e7       	ldi	r24, 0x7F	; 127
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9e 83       	std	Y+6, r25	; 0x06
 594:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x01;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	98 87       	std	Y+8, r25	; 0x08
 59c:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x01;
 59e:	9a 87       	std	Y+10, r25	; 0x0a
 5a0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5a2:	45 e0       	ldi	r20, 0x05	; 5
 5a4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x11;
			frames[1] = 0x21;
			frames[2] = 0x7F;
			frames[3] = 0x01;
			frames[4] = 0x01;
			break;
 5a6:	9e c0       	rjmp	.+316    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '2':
			//31 43 45 49 31
			frames[0] = 0x31;
 5a8:	81 e3       	ldi	r24, 0x31	; 49
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	9a 83       	std	Y+2, r25	; 0x02
 5ae:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x43;
 5b0:	23 e4       	ldi	r18, 0x43	; 67
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	3c 83       	std	Y+4, r19	; 0x04
 5b6:	2b 83       	std	Y+3, r18	; 0x03
			frames[2] = 0x45;
 5b8:	25 e4       	ldi	r18, 0x45	; 69
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	3e 83       	std	Y+6, r19	; 0x06
 5be:	2d 83       	std	Y+5, r18	; 0x05
			frames[3] = 0x49;
 5c0:	29 e4       	ldi	r18, 0x49	; 73
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	38 87       	std	Y+8, r19	; 0x08
 5c6:	2f 83       	std	Y+7, r18	; 0x07
			frames[4] = 0x31;
 5c8:	9a 87       	std	Y+10, r25	; 0x0a
 5ca:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5cc:	45 e0       	ldi	r20, 0x05	; 5
 5ce:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x31;
			frames[1] = 0x43;
			frames[2] = 0x45;
			frames[3] = 0x49;
			frames[4] = 0x31;
			break;
 5d0:	89 c0       	rjmp	.+274    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '3':
			//22 49 49 49 36
			frames[0] = 0x22;
 5d2:	82 e2       	ldi	r24, 0x22	; 34
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	9a 83       	std	Y+2, r25	; 0x02
 5d8:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 5da:	89 e4       	ldi	r24, 0x49	; 73
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9c 83       	std	Y+4, r25	; 0x04
 5e0:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 5e2:	9e 83       	std	Y+6, r25	; 0x06
 5e4:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 5e6:	98 87       	std	Y+8, r25	; 0x08
 5e8:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 5ea:	86 e3       	ldi	r24, 0x36	; 54
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	9a 87       	std	Y+10, r25	; 0x0a
 5f0:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 5f2:	45 e0       	ldi	r20, 0x05	; 5
 5f4:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x22;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 5f6:	76 c0       	rjmp	.+236    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '4':
			//78 08 08 08 7F
			frames[0] = 0x78;
 5f8:	88 e7       	ldi	r24, 0x78	; 120
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	9a 83       	std	Y+2, r25	; 0x02
 5fe:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x08;
 600:	88 e0       	ldi	r24, 0x08	; 8
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	9c 83       	std	Y+4, r25	; 0x04
 606:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x08;
 608:	9e 83       	std	Y+6, r25	; 0x06
 60a:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x08;
 60c:	98 87       	std	Y+8, r25	; 0x08
 60e:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x7F;
 610:	8f e7       	ldi	r24, 0x7F	; 127
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9a 87       	std	Y+10, r25	; 0x0a
 616:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 618:	45 e0       	ldi	r20, 0x05	; 5
 61a:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x78;
			frames[1] = 0x08;
			frames[2] = 0x08;
			frames[3] = 0x08;
			frames[4] = 0x7F;
			break;
 61c:	63 c0       	rjmp	.+198    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '5':
			//79 49 49 49 46
			frames[0] = 0x79;
 61e:	89 e7       	ldi	r24, 0x79	; 121
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9a 83       	std	Y+2, r25	; 0x02
 624:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 626:	89 e4       	ldi	r24, 0x49	; 73
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	9c 83       	std	Y+4, r25	; 0x04
 62c:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 62e:	9e 83       	std	Y+6, r25	; 0x06
 630:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 632:	98 87       	std	Y+8, r25	; 0x08
 634:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x46;
 636:	86 e4       	ldi	r24, 0x46	; 70
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9a 87       	std	Y+10, r25	; 0x0a
 63c:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 63e:	45 e0       	ldi	r20, 0x05	; 5
 640:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x79;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x46;
			break;
 642:	50 c0       	rjmp	.+160    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '6':
			//3E 49 49 49 26
			frames[0] = 0x3E;
 644:	8e e3       	ldi	r24, 0x3E	; 62
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	9a 83       	std	Y+2, r25	; 0x02
 64a:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x49;
 64c:	89 e4       	ldi	r24, 0x49	; 73
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	9c 83       	std	Y+4, r25	; 0x04
 652:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 654:	9e 83       	std	Y+6, r25	; 0x06
 656:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 658:	98 87       	std	Y+8, r25	; 0x08
 65a:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x26;
 65c:	86 e2       	ldi	r24, 0x26	; 38
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9a 87       	std	Y+10, r25	; 0x0a
 662:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 664:	45 e0       	ldi	r20, 0x05	; 5
 666:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x3E;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x26;
			break;
 668:	3d c0       	rjmp	.+122    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '7':
			//41 42 44 48 70
			frames[0] = 0x41;
 66a:	81 e4       	ldi	r24, 0x41	; 65
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	9a 83       	std	Y+2, r25	; 0x02
 670:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x42;
 672:	82 e4       	ldi	r24, 0x42	; 66
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	9c 83       	std	Y+4, r25	; 0x04
 678:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x44;
 67a:	84 e4       	ldi	r24, 0x44	; 68
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	9e 83       	std	Y+6, r25	; 0x06
 680:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 682:	88 e4       	ldi	r24, 0x48	; 72
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	98 87       	std	Y+8, r25	; 0x08
 688:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x70;
 68a:	80 e7       	ldi	r24, 0x70	; 112
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9a 87       	std	Y+10, r25	; 0x0a
 690:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 692:	45 e0       	ldi	r20, 0x05	; 5
 694:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x41;
			frames[1] = 0x42;
			frames[2] = 0x44;
			frames[3] = 0x48;
			frames[4] = 0x70;
			break;
 696:	26 c0       	rjmp	.+76     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '8':
			//36 49 49 49 36
			frames[0] = 0x36;
 698:	26 e3       	ldi	r18, 0x36	; 54
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	3a 83       	std	Y+2, r19	; 0x02
 69e:	29 83       	std	Y+1, r18	; 0x01
			frames[1] = 0x49;
 6a0:	89 e4       	ldi	r24, 0x49	; 73
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	9c 83       	std	Y+4, r25	; 0x04
 6a6:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x49;
 6a8:	9e 83       	std	Y+6, r25	; 0x06
 6aa:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x49;
 6ac:	98 87       	std	Y+8, r25	; 0x08
 6ae:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x36;
 6b0:	3a 87       	std	Y+10, r19	; 0x0a
 6b2:	29 87       	std	Y+9, r18	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6b4:	45 e0       	ldi	r20, 0x05	; 5
 6b6:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x36;
			frames[1] = 0x49;
			frames[2] = 0x49;
			frames[3] = 0x49;
			frames[4] = 0x36;
			break;
 6b8:	15 c0       	rjmp	.+42     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
		case '9':
			//30 48 48 48 3F
			frames[0] = 0x30;
 6ba:	80 e3       	ldi	r24, 0x30	; 48
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	9a 83       	std	Y+2, r25	; 0x02
 6c0:	89 83       	std	Y+1, r24	; 0x01
			frames[1] = 0x48;
 6c2:	88 e4       	ldi	r24, 0x48	; 72
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	9c 83       	std	Y+4, r25	; 0x04
 6c8:	8b 83       	std	Y+3, r24	; 0x03
			frames[2] = 0x48;
 6ca:	9e 83       	std	Y+6, r25	; 0x06
 6cc:	8d 83       	std	Y+5, r24	; 0x05
			frames[3] = 0x48;
 6ce:	98 87       	std	Y+8, r25	; 0x08
 6d0:	8f 83       	std	Y+7, r24	; 0x07
			frames[4] = 0x3F;
 6d2:	8f e3       	ldi	r24, 0x3F	; 63
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	9a 87       	std	Y+10, r25	; 0x0a
 6d8:	89 87       	std	Y+9, r24	; 0x09
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6da:	45 e0       	ldi	r20, 0x05	; 5
 6dc:	50 e0       	ldi	r21, 0x00	; 0
			frames[0] = 0x30;
			frames[1] = 0x48;
			frames[2] = 0x48;
			frames[3] = 0x48;
			frames[4] = 0x3F;
			break;
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
	//debug code
	//USART_send(character);
	//USART_putstring("\n\r");
	//Look for the pattern for the character the user wants to display

	unsigned int numFrames = 5;
 6e0:	45 e0       	ldi	r20, 0x05	; 5
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	fe 01       	movw	r30, r28
 6e6:	31 96       	adiw	r30, 0x01	; 1
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
	}


	//Go through each of the frames
	for(int i = 0; i < numFrames; i++) {
		currentFrameValue = frames[i];
 6ec:	81 91       	ld	r24, Z+
 6ee:	91 91       	ld	r25, Z+
		//No shift is needed for the PORTB
		PORTB = currentFrameValue;
 6f0:	85 b9       	out	0x05, r24	; 5
		//Shift the binary value to the right by 6 for PORTC
		PORTC = currentFrameValue >> 6;
 6f2:	00 24       	eor	r0, r0
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	00 1c       	adc	r0, r0
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	00 1c       	adc	r0, r0
 700:	89 2f       	mov	r24, r25
 702:	90 2d       	mov	r25, r0
 704:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 706:	8f e3       	ldi	r24, 0x3F	; 63
 708:	9c e9       	ldi	r25, 0x9C	; 156
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 710:	00 00       	nop
			break;
	}


	//Go through each of the frames
	for(int i = 0; i < numFrames; i++) {
 712:	2f 5f       	subi	r18, 0xFF	; 255
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	24 17       	cp	r18, r20
 718:	35 07       	cpc	r19, r21
 71a:	40 f3       	brcs	.-48     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
		PORTC = currentFrameValue >> 6;
		delay();
	}

	// Add an empty frame to separate letters from each other
	PORTB = 0x00;
 71c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 71e:	18 b8       	out	0x08, r1	; 8
 720:	af e3       	ldi	r26, 0x3F	; 63
 722:	bc e9       	ldi	r27, 0x9C	; 156
 724:	11 97       	sbiw	r26, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 728:	00 c0       	rjmp	.+0      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 72a:	00 00       	nop
	delay();

}
 72c:	2a 96       	adiw	r28, 0x0a	; 10
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret

0000073e <USART_init>:
	return;
}

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 73e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 742:	87 e6       	ldi	r24, 0x67	; 103
 744:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 748:	88 e1       	ldi	r24, 0x18	; 24
 74a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 754:	08 95       	ret

00000756 <USART_receive>:
}

unsigned char USART_receive(void){
	if((UCSR0A & (1<<RXC0))){
 756:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 75a:	88 23       	and	r24, r24
 75c:	1c f4       	brge	.+6      	; 0x764 <USART_receive+0xe>
		return UDR0;
 75e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 762:	08 95       	ret
	}
	return '\0';
 764:	80 e0       	ldi	r24, 0x00	; 0
}
 766:	08 95       	ret

00000768 <USART_send>:

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 768:	e0 ec       	ldi	r30, 0xC0	; 192
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	90 81       	ld	r25, Z
 76e:	95 ff       	sbrs	r25, 5
 770:	fd cf       	rjmp	.-6      	; 0x76c <USART_send+0x4>
	UDR0 = data;
 772:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 776:	08 95       	ret

00000778 <get_input>:
	PORTC = 0x00;
	delay();

}

void get_input(char * text, int length){
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
	for(int i = 0; i < length; i++){
 784:	16 16       	cp	r1, r22
 786:	17 06       	cpc	r1, r23
 788:	e4 f4       	brge	.+56     	; 0x7c2 <get_input+0x4a>
 78a:	7b 01       	movw	r14, r22
 78c:	08 2f       	mov	r16, r24
 78e:	19 2f       	mov	r17, r25
 790:	c0 e0       	ldi	r28, 0x00	; 0
 792:	d0 e0       	ldi	r29, 0x00	; 0
		ASCII = '\0';
 794:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		while(ASCII == '\0' || ASCII == '`'){
			ASCII = USART_receive();
 798:	de df       	rcall	.-68     	; 0x756 <USART_receive>
 79a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
		ASCII = '\0';
		while(ASCII == '\0' || ASCII == '`'){
 79e:	88 23       	and	r24, r24
 7a0:	d9 f3       	breq	.-10     	; 0x798 <get_input+0x20>
 7a2:	80 36       	cpi	r24, 0x60	; 96
 7a4:	c9 f3       	breq	.-14     	; 0x798 <get_input+0x20>
			ASCII = USART_receive();
		}
		text[i] = ASCII;
 7a6:	f8 01       	movw	r30, r16
 7a8:	81 93       	st	Z+, r24
 7aa:	8f 01       	movw	r16, r30
		USART_send(ASCII);
 7ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 7b0:	db df       	rcall	.-74     	; 0x768 <USART_send>
		eeprom_write_byte((uint8_t *)i, ASCII);
 7b2:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 7b6:	ce 01       	movw	r24, r28
 7b8:	73 d0       	rcall	.+230    	; 0x8a0 <eeprom_write_byte>
	delay();

}

void get_input(char * text, int length){
	for(int i = 0; i < length; i++){
 7ba:	21 96       	adiw	r28, 0x01	; 1
 7bc:	ec 16       	cp	r14, r28
 7be:	fd 06       	cpc	r15, r29
 7c0:	49 f7       	brne	.-46     	; 0x794 <get_input+0x1c>
		text[i] = ASCII;
		USART_send(ASCII);
		eeprom_write_byte((uint8_t *)i, ASCII);
	}
	return;
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	08 95       	ret

000007d0 <USART_putstring>:
void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
 7d6:	88 81       	ld	r24, Y
 7d8:	88 23       	and	r24, r24
 7da:	29 f0       	breq	.+10     	; 0x7e6 <USART_putstring+0x16>
 7dc:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 7de:	c4 df       	rcall	.-120    	; 0x768 <USART_send>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0x00){
 7e0:	89 91       	ld	r24, Y+
 7e2:	81 11       	cpse	r24, r1
 7e4:	fc cf       	rjmp	.-8      	; 0x7de <USART_putstring+0xe>
		USART_send(*StringPtr);
		StringPtr++;
	}
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <main>:

// Constants
const double DELAY_MS = 10.00; // Adjust this variable to adjust the delay between each frame

int main (void)
{
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <main+0x6>
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <main+0x8>
 7f4:	1f 92       	push	r1
 7f6:	cd b7       	in	r28, 0x3d	; 61
 7f8:	de b7       	in	r29, 0x3e	; 62
	int TEXT_LENGTH = 5;
	char TEXT[TEXT_LENGTH];
	//Set all pins on PORT D to output
	DDRB = 0b00111111;
 7fa:	8f e3       	ldi	r24, 0x3F	; 63
 7fc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000001;
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	87 b9       	out	0x07, r24	; 7

	eeprom_read_block((void *)&TEXT, (const void *)0, TEXT_LENGTH); //reads the eeprom on load
 802:	45 e0       	ldi	r20, 0x05	; 5
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	38 d0       	rcall	.+112    	; 0x880 <eeprom_read_block>

	//Initialize the board
	board_init();
 810:	81 dc       	rcall	.-1790   	; 0x114 <board_init>
	//Initialize the USART
	USART_init();
 812:	95 df       	rcall	.-214    	; 0x73e <USART_init>
 814:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	ASCII = '\0';
 818:	7e 01       	movw	r14, r28
 81a:	86 e0       	ldi	r24, 0x06	; 6
 81c:	e8 0e       	add	r14, r24
 81e:	f1 1c       	adc	r15, r1
	while(1) {
 		ASCII = USART_receive();
 820:	9a df       	rcall	.-204    	; 0x756 <USART_receive>
 822:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 826:	80 36       	cpi	r24, 0x60	; 96
 		if(ASCII == '`'){
 828:	09 f5       	brne	.+66     	; 0x86c <main+0x80>
 			USART_putstring("Type 5 characters\n");
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	d0 df       	rcall	.-96     	; 0x7d0 <USART_putstring>
 			get_input(TEXT, TEXT_LENGTH);
 830:	65 e0       	ldi	r22, 0x05	; 5
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	ce 01       	movw	r24, r28
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	9f df       	rcall	.-194    	; 0x778 <get_input>
			USART_putstring("\n\rWord set to ");
 83a:	83 e1       	ldi	r24, 0x13	; 19
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	c8 df       	rcall	.-112    	; 0x7d0 <USART_putstring>
 840:	8e 01       	movw	r16, r28
 842:	0f 5f       	subi	r16, 0xFF	; 255
 844:	1f 4f       	sbci	r17, 0xFF	; 255
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
 846:	f8 01       	movw	r30, r16
 848:	81 91       	ld	r24, Z+
 84a:	8f 01       	movw	r16, r30
 84c:	8d df       	rcall	.-230    	; 0x768 <USART_send>
 		ASCII = USART_receive();
 		if(ASCII == '`'){
 			USART_putstring("Type 5 characters\n");
 			get_input(TEXT, TEXT_LENGTH);
			USART_putstring("\n\rWord set to ");
			for(int i = 0; i < TEXT_LENGTH; i++){
 84e:	0e 15       	cp	r16, r14
 850:	1f 05       	cpc	r17, r15
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 852:	c9 f7       	brne	.-14     	; 0x846 <main+0x5a>
 854:	82 e2       	ldi	r24, 0x22	; 34
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	bb df       	rcall	.-138    	; 0x7d0 <USART_putstring>
 85a:	08 c0       	rjmp	.+16     	; 0x86c <main+0x80>
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
			displayCharacter(TEXT[i]);
 85c:	f8 01       	movw	r30, r16
 85e:	81 91       	ld	r24, Z+
 860:	8f 01       	movw	r16, r30
 862:	61 dc       	rcall	.-1854   	; 0x126 <displayCharacter>
 864:	0e 15       	cp	r16, r14
			for(int i = 0; i < TEXT_LENGTH; i++){
				USART_send(TEXT[i]); // putstring didn't like char arrays
			}
			USART_putstring("\n\r");
 		}
		for(int i = 0; i < TEXT_LENGTH; i++){
 866:	1f 05       	cpc	r17, r15
 868:	c9 f7       	brne	.-14     	; 0x85c <main+0x70>
 86a:	da cf       	rjmp	.-76     	; 0x820 <main+0x34>
 86c:	8e 01       	movw	r16, r28
 86e:	0f 5f       	subi	r16, 0xFF	; 255
 870:	1f 4f       	sbci	r17, 0xFF	; 255
 872:	f4 cf       	rjmp	.-24     	; 0x85c <main+0x70>

00000874 <__tablejump2__>:
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	05 90       	lpm	r0, Z+
 87a:	f4 91       	lpm	r31, Z
 87c:	e0 2d       	mov	r30, r0
 87e:	09 94       	ijmp

00000880 <eeprom_read_block>:
 880:	dc 01       	movw	r26, r24
 882:	cb 01       	movw	r24, r22

00000884 <eeprom_read_blraw>:
 884:	fc 01       	movw	r30, r24
 886:	f9 99       	sbic	0x1f, 1	; 31
 888:	fe cf       	rjmp	.-4      	; 0x886 <eeprom_read_blraw+0x2>
 88a:	06 c0       	rjmp	.+12     	; 0x898 <eeprom_read_blraw+0x14>
 88c:	f2 bd       	out	0x22, r31	; 34
 88e:	e1 bd       	out	0x21, r30	; 33
 890:	f8 9a       	sbi	0x1f, 0	; 31
 892:	31 96       	adiw	r30, 0x01	; 1
 894:	00 b4       	in	r0, 0x20	; 32
 896:	0d 92       	st	X+, r0
 898:	41 50       	subi	r20, 0x01	; 1
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	b8 f7       	brcc	.-18     	; 0x88c <eeprom_read_blraw+0x8>
 89e:	08 95       	ret

000008a0 <eeprom_write_byte>:
 8a0:	26 2f       	mov	r18, r22

000008a2 <eeprom_write_r18>:
 8a2:	f9 99       	sbic	0x1f, 1	; 31
 8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <eeprom_write_r18>
 8a6:	1f ba       	out	0x1f, r1	; 31
 8a8:	92 bd       	out	0x22, r25	; 34
 8aa:	81 bd       	out	0x21, r24	; 33
 8ac:	20 bd       	out	0x20, r18	; 32
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	fa 9a       	sbi	0x1f, 2	; 31
 8b4:	f9 9a       	sbi	0x1f, 1	; 31
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
